// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TrustWalletCore.proto

#include "TrustWalletCore.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_TrustWalletCore_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_TrustWalletCore_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BinanceCancelTradeOrder;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_TrustWalletCore_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BinanceSendOrder_Token;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_TrustWalletCore_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BinanceTokenFreezeOrder;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_TrustWalletCore_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BinanceTokenUnfreezeOrder;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_TrustWalletCore_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BinanceTradeOrder;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_TrustWalletCore_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BitcoinOutPoint;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_TrustWalletCore_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BitcoinSigningInput_ScriptsEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_TrustWalletCore_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_BinanceSendOrder_Input;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_TrustWalletCore_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_BinanceSendOrder_Output;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_TrustWalletCore_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_BitcoinUnspentTransaction;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_TrustWalletCore_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_BinanceSendOrder;
}  // namespace protobuf_TrustWalletCore_2eproto
namespace TW {
namespace proto {
class BitcoinOutPointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BitcoinOutPoint>
      _instance;
} _BitcoinOutPoint_default_instance_;
class BitcoinUnspentTransactionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BitcoinUnspentTransaction>
      _instance;
} _BitcoinUnspentTransaction_default_instance_;
class BitcoinSigningInput_ScriptsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BitcoinSigningInput_ScriptsEntry_DoNotUse>
      _instance;
} _BitcoinSigningInput_ScriptsEntry_DoNotUse_default_instance_;
class BitcoinSigningInputDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BitcoinSigningInput>
      _instance;
} _BitcoinSigningInput_default_instance_;
class BinanceTransactionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BinanceTransaction>
      _instance;
} _BinanceTransaction_default_instance_;
class BinanceSignature_PubKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BinanceSignature_PubKey>
      _instance;
} _BinanceSignature_PubKey_default_instance_;
class BinanceSignatureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BinanceSignature>
      _instance;
} _BinanceSignature_default_instance_;
class BinanceTradeOrderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BinanceTradeOrder>
      _instance;
} _BinanceTradeOrder_default_instance_;
class BinanceCancelTradeOrderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BinanceCancelTradeOrder>
      _instance;
} _BinanceCancelTradeOrder_default_instance_;
class BinanceSendOrder_TokenDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BinanceSendOrder_Token>
      _instance;
} _BinanceSendOrder_Token_default_instance_;
class BinanceSendOrder_InputDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BinanceSendOrder_Input>
      _instance;
} _BinanceSendOrder_Input_default_instance_;
class BinanceSendOrder_OutputDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BinanceSendOrder_Output>
      _instance;
} _BinanceSendOrder_Output_default_instance_;
class BinanceSendOrderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BinanceSendOrder>
      _instance;
} _BinanceSendOrder_default_instance_;
class BinanceTokenFreezeOrderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BinanceTokenFreezeOrder>
      _instance;
} _BinanceTokenFreezeOrder_default_instance_;
class BinanceTokenUnfreezeOrderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BinanceTokenUnfreezeOrder>
      _instance;
} _BinanceTokenUnfreezeOrder_default_instance_;
class BinanceSigningInputDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BinanceSigningInput>
      _instance;
  const ::TW::proto::BinanceTradeOrder* trade_order_;
  const ::TW::proto::BinanceCancelTradeOrder* cancel_trade_order_;
  const ::TW::proto::BinanceSendOrder* send_order_;
  const ::TW::proto::BinanceTokenFreezeOrder* freeze_order_;
  const ::TW::proto::BinanceTokenUnfreezeOrder* unfreeze_order_;
} _BinanceSigningInput_default_instance_;
}  // namespace proto
}  // namespace TW
namespace protobuf_TrustWalletCore_2eproto {
static void InitDefaultsBitcoinOutPoint() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::proto::_BitcoinOutPoint_default_instance_;
    new (ptr) ::TW::proto::BitcoinOutPoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TW::proto::BitcoinOutPoint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BitcoinOutPoint =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBitcoinOutPoint}, {}};

static void InitDefaultsBitcoinUnspentTransaction() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::proto::_BitcoinUnspentTransaction_default_instance_;
    new (ptr) ::TW::proto::BitcoinUnspentTransaction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TW::proto::BitcoinUnspentTransaction::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_BitcoinUnspentTransaction =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBitcoinUnspentTransaction}, {
      &protobuf_TrustWalletCore_2eproto::scc_info_BitcoinOutPoint.base,}};

static void InitDefaultsBitcoinSigningInput_ScriptsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::proto::_BitcoinSigningInput_ScriptsEntry_DoNotUse_default_instance_;
    new (ptr) ::TW::proto::BitcoinSigningInput_ScriptsEntry_DoNotUse();
  }
  ::TW::proto::BitcoinSigningInput_ScriptsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BitcoinSigningInput_ScriptsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBitcoinSigningInput_ScriptsEntry_DoNotUse}, {}};

static void InitDefaultsBitcoinSigningInput() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::proto::_BitcoinSigningInput_default_instance_;
    new (ptr) ::TW::proto::BitcoinSigningInput();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TW::proto::BitcoinSigningInput::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_BitcoinSigningInput =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsBitcoinSigningInput}, {
      &protobuf_TrustWalletCore_2eproto::scc_info_BitcoinSigningInput_ScriptsEntry_DoNotUse.base,
      &protobuf_TrustWalletCore_2eproto::scc_info_BitcoinUnspentTransaction.base,}};

static void InitDefaultsBinanceTransaction() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::proto::_BinanceTransaction_default_instance_;
    new (ptr) ::TW::proto::BinanceTransaction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TW::proto::BinanceTransaction::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BinanceTransaction =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBinanceTransaction}, {}};

static void InitDefaultsBinanceSignature_PubKey() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::proto::_BinanceSignature_PubKey_default_instance_;
    new (ptr) ::TW::proto::BinanceSignature_PubKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TW::proto::BinanceSignature_PubKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BinanceSignature_PubKey =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBinanceSignature_PubKey}, {}};

static void InitDefaultsBinanceSignature() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::proto::_BinanceSignature_default_instance_;
    new (ptr) ::TW::proto::BinanceSignature();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TW::proto::BinanceSignature::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BinanceSignature =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBinanceSignature}, {}};

static void InitDefaultsBinanceTradeOrder() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::proto::_BinanceTradeOrder_default_instance_;
    new (ptr) ::TW::proto::BinanceTradeOrder();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TW::proto::BinanceTradeOrder::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BinanceTradeOrder =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBinanceTradeOrder}, {}};

static void InitDefaultsBinanceCancelTradeOrder() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::proto::_BinanceCancelTradeOrder_default_instance_;
    new (ptr) ::TW::proto::BinanceCancelTradeOrder();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TW::proto::BinanceCancelTradeOrder::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BinanceCancelTradeOrder =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBinanceCancelTradeOrder}, {}};

static void InitDefaultsBinanceSendOrder_Token() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::proto::_BinanceSendOrder_Token_default_instance_;
    new (ptr) ::TW::proto::BinanceSendOrder_Token();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TW::proto::BinanceSendOrder_Token::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BinanceSendOrder_Token =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBinanceSendOrder_Token}, {}};

static void InitDefaultsBinanceSendOrder_Input() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::proto::_BinanceSendOrder_Input_default_instance_;
    new (ptr) ::TW::proto::BinanceSendOrder_Input();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TW::proto::BinanceSendOrder_Input::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_BinanceSendOrder_Input =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBinanceSendOrder_Input}, {
      &protobuf_TrustWalletCore_2eproto::scc_info_BinanceSendOrder_Token.base,}};

static void InitDefaultsBinanceSendOrder_Output() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::proto::_BinanceSendOrder_Output_default_instance_;
    new (ptr) ::TW::proto::BinanceSendOrder_Output();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TW::proto::BinanceSendOrder_Output::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_BinanceSendOrder_Output =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBinanceSendOrder_Output}, {
      &protobuf_TrustWalletCore_2eproto::scc_info_BinanceSendOrder_Token.base,}};

static void InitDefaultsBinanceSendOrder() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::proto::_BinanceSendOrder_default_instance_;
    new (ptr) ::TW::proto::BinanceSendOrder();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TW::proto::BinanceSendOrder::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_BinanceSendOrder =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsBinanceSendOrder}, {
      &protobuf_TrustWalletCore_2eproto::scc_info_BinanceSendOrder_Input.base,
      &protobuf_TrustWalletCore_2eproto::scc_info_BinanceSendOrder_Output.base,}};

static void InitDefaultsBinanceTokenFreezeOrder() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::proto::_BinanceTokenFreezeOrder_default_instance_;
    new (ptr) ::TW::proto::BinanceTokenFreezeOrder();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TW::proto::BinanceTokenFreezeOrder::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BinanceTokenFreezeOrder =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBinanceTokenFreezeOrder}, {}};

static void InitDefaultsBinanceTokenUnfreezeOrder() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::proto::_BinanceTokenUnfreezeOrder_default_instance_;
    new (ptr) ::TW::proto::BinanceTokenUnfreezeOrder();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TW::proto::BinanceTokenUnfreezeOrder::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BinanceTokenUnfreezeOrder =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBinanceTokenUnfreezeOrder}, {}};

static void InitDefaultsBinanceSigningInput() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::proto::_BinanceSigningInput_default_instance_;
    new (ptr) ::TW::proto::BinanceSigningInput();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TW::proto::BinanceSigningInput::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_BinanceSigningInput =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsBinanceSigningInput}, {
      &protobuf_TrustWalletCore_2eproto::scc_info_BinanceTradeOrder.base,
      &protobuf_TrustWalletCore_2eproto::scc_info_BinanceCancelTradeOrder.base,
      &protobuf_TrustWalletCore_2eproto::scc_info_BinanceSendOrder.base,
      &protobuf_TrustWalletCore_2eproto::scc_info_BinanceTokenFreezeOrder.base,
      &protobuf_TrustWalletCore_2eproto::scc_info_BinanceTokenUnfreezeOrder.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_BitcoinOutPoint.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BitcoinUnspentTransaction.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BitcoinSigningInput_ScriptsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BitcoinSigningInput.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BinanceTransaction.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BinanceSignature_PubKey.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BinanceSignature.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BinanceTradeOrder.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BinanceCancelTradeOrder.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BinanceSendOrder_Token.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BinanceSendOrder_Input.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BinanceSendOrder_Output.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BinanceSendOrder.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BinanceTokenFreezeOrder.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BinanceTokenUnfreezeOrder.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BinanceSigningInput.base);
}

}  // namespace protobuf_TrustWalletCore_2eproto
namespace TW {
namespace proto {

// ===================================================================

void BitcoinOutPoint::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BitcoinOutPoint::kHashFieldNumber;
const int BitcoinOutPoint::kIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BitcoinOutPoint::BitcoinOutPoint()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_TrustWalletCore_2eproto::scc_info_BitcoinOutPoint.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:TW.proto.BitcoinOutPoint)
}
BitcoinOutPoint::BitcoinOutPoint(const BitcoinOutPoint& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hash().size() > 0) {
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:TW.proto.BitcoinOutPoint)
}

void BitcoinOutPoint::SharedCtor() {
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_ = 0u;
}

BitcoinOutPoint::~BitcoinOutPoint() {
  // @@protoc_insertion_point(destructor:TW.proto.BitcoinOutPoint)
  SharedDtor();
}

void BitcoinOutPoint::SharedDtor() {
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BitcoinOutPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BitcoinOutPoint& BitcoinOutPoint::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_TrustWalletCore_2eproto::scc_info_BitcoinOutPoint.base);
  return *internal_default_instance();
}


void BitcoinOutPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.proto.BitcoinOutPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_ = 0u;
  _internal_metadata_.Clear();
}

bool BitcoinOutPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:TW.proto.BitcoinOutPoint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TW.proto.BitcoinOutPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TW.proto.BitcoinOutPoint)
  return false;
#undef DO_
}

void BitcoinOutPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TW.proto.BitcoinOutPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->hash(), output);
  }

  // uint32 index = 2;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:TW.proto.BitcoinOutPoint)
}

size_t BitcoinOutPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.proto.BitcoinOutPoint)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hash());
  }

  // uint32 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BitcoinOutPoint::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BitcoinOutPoint*>(&from));
}

void BitcoinOutPoint::MergeFrom(const BitcoinOutPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.proto.BitcoinOutPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
}

void BitcoinOutPoint::CopyFrom(const BitcoinOutPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.proto.BitcoinOutPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BitcoinOutPoint::IsInitialized() const {
  return true;
}

void BitcoinOutPoint::Swap(BitcoinOutPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BitcoinOutPoint::InternalSwap(BitcoinOutPoint* other) {
  using std::swap;
  hash_.Swap(&other->hash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(index_, other->index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string BitcoinOutPoint::GetTypeName() const {
  return "TW.proto.BitcoinOutPoint";
}


// ===================================================================

void BitcoinUnspentTransaction::InitAsDefaultInstance() {
  ::TW::proto::_BitcoinUnspentTransaction_default_instance_._instance.get_mutable()->out_point_ = const_cast< ::TW::proto::BitcoinOutPoint*>(
      ::TW::proto::BitcoinOutPoint::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BitcoinUnspentTransaction::kOutPointFieldNumber;
const int BitcoinUnspentTransaction::kScriptFieldNumber;
const int BitcoinUnspentTransaction::kAmountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BitcoinUnspentTransaction::BitcoinUnspentTransaction()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_TrustWalletCore_2eproto::scc_info_BitcoinUnspentTransaction.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:TW.proto.BitcoinUnspentTransaction)
}
BitcoinUnspentTransaction::BitcoinUnspentTransaction(const BitcoinUnspentTransaction& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  script_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.script().size() > 0) {
    script_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.script_);
  }
  if (from.has_out_point()) {
    out_point_ = new ::TW::proto::BitcoinOutPoint(*from.out_point_);
  } else {
    out_point_ = NULL;
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:TW.proto.BitcoinUnspentTransaction)
}

void BitcoinUnspentTransaction::SharedCtor() {
  script_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&out_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&amount_) -
      reinterpret_cast<char*>(&out_point_)) + sizeof(amount_));
}

BitcoinUnspentTransaction::~BitcoinUnspentTransaction() {
  // @@protoc_insertion_point(destructor:TW.proto.BitcoinUnspentTransaction)
  SharedDtor();
}

void BitcoinUnspentTransaction::SharedDtor() {
  script_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete out_point_;
}

void BitcoinUnspentTransaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BitcoinUnspentTransaction& BitcoinUnspentTransaction::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_TrustWalletCore_2eproto::scc_info_BitcoinUnspentTransaction.base);
  return *internal_default_instance();
}


void BitcoinUnspentTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.proto.BitcoinUnspentTransaction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  script_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && out_point_ != NULL) {
    delete out_point_;
  }
  out_point_ = NULL;
  amount_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool BitcoinUnspentTransaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:TW.proto.BitcoinUnspentTransaction)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .TW.proto.BitcoinOutPoint out_point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_out_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes script = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_script()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 amount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TW.proto.BitcoinUnspentTransaction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TW.proto.BitcoinUnspentTransaction)
  return false;
#undef DO_
}

void BitcoinUnspentTransaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TW.proto.BitcoinUnspentTransaction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.proto.BitcoinOutPoint out_point = 1;
  if (this->has_out_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_out_point(), output);
  }

  // bytes script = 2;
  if (this->script().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->script(), output);
  }

  // int64 amount = 3;
  if (this->amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->amount(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:TW.proto.BitcoinUnspentTransaction)
}

size_t BitcoinUnspentTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.proto.BitcoinUnspentTransaction)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // bytes script = 2;
  if (this->script().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->script());
  }

  // .TW.proto.BitcoinOutPoint out_point = 1;
  if (this->has_out_point()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *out_point_);
  }

  // int64 amount = 3;
  if (this->amount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->amount());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BitcoinUnspentTransaction::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BitcoinUnspentTransaction*>(&from));
}

void BitcoinUnspentTransaction::MergeFrom(const BitcoinUnspentTransaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.proto.BitcoinUnspentTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.script().size() > 0) {

    script_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.script_);
  }
  if (from.has_out_point()) {
    mutable_out_point()->::TW::proto::BitcoinOutPoint::MergeFrom(from.out_point());
  }
  if (from.amount() != 0) {
    set_amount(from.amount());
  }
}

void BitcoinUnspentTransaction::CopyFrom(const BitcoinUnspentTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.proto.BitcoinUnspentTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BitcoinUnspentTransaction::IsInitialized() const {
  return true;
}

void BitcoinUnspentTransaction::Swap(BitcoinUnspentTransaction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BitcoinUnspentTransaction::InternalSwap(BitcoinUnspentTransaction* other) {
  using std::swap;
  script_.Swap(&other->script_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(out_point_, other->out_point_);
  swap(amount_, other->amount_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string BitcoinUnspentTransaction::GetTypeName() const {
  return "TW.proto.BitcoinUnspentTransaction";
}


// ===================================================================

BitcoinSigningInput_ScriptsEntry_DoNotUse::BitcoinSigningInput_ScriptsEntry_DoNotUse() {}
BitcoinSigningInput_ScriptsEntry_DoNotUse::BitcoinSigningInput_ScriptsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void BitcoinSigningInput_ScriptsEntry_DoNotUse::MergeFrom(const BitcoinSigningInput_ScriptsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

void BitcoinSigningInput::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BitcoinSigningInput::kHashTypeFieldNumber;
const int BitcoinSigningInput::kAmountFieldNumber;
const int BitcoinSigningInput::kToAddressFieldNumber;
const int BitcoinSigningInput::kChangeAddressFieldNumber;
const int BitcoinSigningInput::kPrivateKeyFieldNumber;
const int BitcoinSigningInput::kScriptsFieldNumber;
const int BitcoinSigningInput::kUtxoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BitcoinSigningInput::BitcoinSigningInput()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_TrustWalletCore_2eproto::scc_info_BitcoinSigningInput.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:TW.proto.BitcoinSigningInput)
}
BitcoinSigningInput::BitcoinSigningInput(const BitcoinSigningInput& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      private_key_(from.private_key_),
      utxo_(from.utxo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  scripts_.MergeFrom(from.scripts_);
  to_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.to_address().size() > 0) {
    to_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_address_);
  }
  change_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.change_address().size() > 0) {
    change_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.change_address_);
  }
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&hash_type_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(hash_type_));
  // @@protoc_insertion_point(copy_constructor:TW.proto.BitcoinSigningInput)
}

void BitcoinSigningInput::SharedCtor() {
  to_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  change_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hash_type_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(hash_type_));
}

BitcoinSigningInput::~BitcoinSigningInput() {
  // @@protoc_insertion_point(destructor:TW.proto.BitcoinSigningInput)
  SharedDtor();
}

void BitcoinSigningInput::SharedDtor() {
  to_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  change_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BitcoinSigningInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BitcoinSigningInput& BitcoinSigningInput::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_TrustWalletCore_2eproto::scc_info_BitcoinSigningInput.base);
  return *internal_default_instance();
}


void BitcoinSigningInput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.proto.BitcoinSigningInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  private_key_.Clear();
  scripts_.Clear();
  utxo_.Clear();
  to_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  change_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hash_type_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(hash_type_));
  _internal_metadata_.Clear();
}

bool BitcoinSigningInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:TW.proto.BitcoinSigningInput)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 hash_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hash_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 amount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string to_address = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->to_address().data(), static_cast<int>(this->to_address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TW.proto.BitcoinSigningInput.to_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string change_address = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_change_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->change_address().data(), static_cast<int>(this->change_address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TW.proto.BitcoinSigningInput.change_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes private_key = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_private_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, bytes> scripts = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          BitcoinSigningInput_ScriptsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapFieldLite<
              BitcoinSigningInput_ScriptsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&scripts_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TW.proto.BitcoinSigningInput.ScriptsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TW.proto.BitcoinUnspentTransaction utxo = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_utxo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TW.proto.BitcoinSigningInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TW.proto.BitcoinSigningInput)
  return false;
#undef DO_
}

void BitcoinSigningInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TW.proto.BitcoinSigningInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 hash_type = 1;
  if (this->hash_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hash_type(), output);
  }

  // int64 amount = 2;
  if (this->amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->amount(), output);
  }

  // string to_address = 3;
  if (this->to_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to_address().data(), static_cast<int>(this->to_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TW.proto.BitcoinSigningInput.to_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->to_address(), output);
  }

  // string change_address = 4;
  if (this->change_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->change_address().data(), static_cast<int>(this->change_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TW.proto.BitcoinSigningInput.change_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->change_address(), output);
  }

  // repeated bytes private_key = 10;
  for (int i = 0, n = this->private_key_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->private_key(i), output);
  }

  // map<string, bytes> scripts = 11;
  if (!this->scripts().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "TW.proto.BitcoinSigningInput.ScriptsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->scripts().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->scripts().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->scripts().begin();
          it != this->scripts().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<BitcoinSigningInput_ScriptsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(scripts_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            11, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<BitcoinSigningInput_ScriptsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->scripts().begin();
          it != this->scripts().end(); ++it) {
        entry.reset(scripts_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            11, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated .TW.proto.BitcoinUnspentTransaction utxo = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->utxo_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12,
      this->utxo(static_cast<int>(i)),
      output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:TW.proto.BitcoinSigningInput)
}

size_t BitcoinSigningInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.proto.BitcoinSigningInput)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated bytes private_key = 10;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->private_key_size());
  for (int i = 0, n = this->private_key_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->private_key(i));
  }

  // map<string, bytes> scripts = 11;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->scripts_size());
  {
    ::std::unique_ptr<BitcoinSigningInput_ScriptsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->scripts().begin();
        it != this->scripts().end(); ++it) {
      entry.reset(scripts_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated .TW.proto.BitcoinUnspentTransaction utxo = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->utxo_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->utxo(static_cast<int>(i)));
    }
  }

  // string to_address = 3;
  if (this->to_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->to_address());
  }

  // string change_address = 4;
  if (this->change_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->change_address());
  }

  // int64 amount = 2;
  if (this->amount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->amount());
  }

  // uint32 hash_type = 1;
  if (this->hash_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hash_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BitcoinSigningInput::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BitcoinSigningInput*>(&from));
}

void BitcoinSigningInput::MergeFrom(const BitcoinSigningInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.proto.BitcoinSigningInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  private_key_.MergeFrom(from.private_key_);
  scripts_.MergeFrom(from.scripts_);
  utxo_.MergeFrom(from.utxo_);
  if (from.to_address().size() > 0) {

    to_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_address_);
  }
  if (from.change_address().size() > 0) {

    change_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.change_address_);
  }
  if (from.amount() != 0) {
    set_amount(from.amount());
  }
  if (from.hash_type() != 0) {
    set_hash_type(from.hash_type());
  }
}

void BitcoinSigningInput::CopyFrom(const BitcoinSigningInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.proto.BitcoinSigningInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BitcoinSigningInput::IsInitialized() const {
  return true;
}

void BitcoinSigningInput::Swap(BitcoinSigningInput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BitcoinSigningInput::InternalSwap(BitcoinSigningInput* other) {
  using std::swap;
  private_key_.InternalSwap(CastToBase(&other->private_key_));
  scripts_.Swap(&other->scripts_);
  CastToBase(&utxo_)->InternalSwap(CastToBase(&other->utxo_));
  to_address_.Swap(&other->to_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  change_address_.Swap(&other->change_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(amount_, other->amount_);
  swap(hash_type_, other->hash_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string BitcoinSigningInput::GetTypeName() const {
  return "TW.proto.BitcoinSigningInput";
}


// ===================================================================

void BinanceTransaction::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BinanceTransaction::kMsgsFieldNumber;
const int BinanceTransaction::kSignaturesFieldNumber;
const int BinanceTransaction::kMemoFieldNumber;
const int BinanceTransaction::kSourceFieldNumber;
const int BinanceTransaction::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BinanceTransaction::BinanceTransaction()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_TrustWalletCore_2eproto::scc_info_BinanceTransaction.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:TW.proto.BinanceTransaction)
}
BinanceTransaction::BinanceTransaction(const BinanceTransaction& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      msgs_(from.msgs_),
      signatures_(from.signatures_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  memo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.memo().size() > 0) {
    memo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.memo_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  source_ = from.source_;
  // @@protoc_insertion_point(copy_constructor:TW.proto.BinanceTransaction)
}

void BinanceTransaction::SharedCtor() {
  memo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_ = GOOGLE_LONGLONG(0);
}

BinanceTransaction::~BinanceTransaction() {
  // @@protoc_insertion_point(destructor:TW.proto.BinanceTransaction)
  SharedDtor();
}

void BinanceTransaction::SharedDtor() {
  memo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BinanceTransaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BinanceTransaction& BinanceTransaction::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_TrustWalletCore_2eproto::scc_info_BinanceTransaction.base);
  return *internal_default_instance();
}


void BinanceTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.proto.BinanceTransaction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msgs_.Clear();
  signatures_.Clear();
  memo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool BinanceTransaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:TW.proto.BinanceTransaction)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes msgs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_msgs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes signatures = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_signatures()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string memo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_memo()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->memo().data(), static_cast<int>(this->memo().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TW.proto.BinanceTransaction.memo"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint64 source = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TW.proto.BinanceTransaction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TW.proto.BinanceTransaction)
  return false;
#undef DO_
}

void BinanceTransaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TW.proto.BinanceTransaction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes msgs = 1;
  for (int i = 0, n = this->msgs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->msgs(i), output);
  }

  // repeated bytes signatures = 2;
  for (int i = 0, n = this->signatures_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->signatures(i), output);
  }

  // string memo = 3;
  if (this->memo().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->memo().data(), static_cast<int>(this->memo().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TW.proto.BinanceTransaction.memo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->memo(), output);
  }

  // sint64 source = 4;
  if (this->source() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(4, this->source(), output);
  }

  // bytes data = 5;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->data(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:TW.proto.BinanceTransaction)
}

size_t BinanceTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.proto.BinanceTransaction)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated bytes msgs = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->msgs_size());
  for (int i = 0, n = this->msgs_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->msgs(i));
  }

  // repeated bytes signatures = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->signatures_size());
  for (int i = 0, n = this->signatures_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->signatures(i));
  }

  // string memo = 3;
  if (this->memo().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->memo());
  }

  // bytes data = 5;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // sint64 source = 4;
  if (this->source() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->source());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinanceTransaction::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BinanceTransaction*>(&from));
}

void BinanceTransaction::MergeFrom(const BinanceTransaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.proto.BinanceTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msgs_.MergeFrom(from.msgs_);
  signatures_.MergeFrom(from.signatures_);
  if (from.memo().size() > 0) {

    memo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.memo_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.source() != 0) {
    set_source(from.source());
  }
}

void BinanceTransaction::CopyFrom(const BinanceTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.proto.BinanceTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinanceTransaction::IsInitialized() const {
  return true;
}

void BinanceTransaction::Swap(BinanceTransaction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BinanceTransaction::InternalSwap(BinanceTransaction* other) {
  using std::swap;
  msgs_.InternalSwap(CastToBase(&other->msgs_));
  signatures_.InternalSwap(CastToBase(&other->signatures_));
  memo_.Swap(&other->memo_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(source_, other->source_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string BinanceTransaction::GetTypeName() const {
  return "TW.proto.BinanceTransaction";
}


// ===================================================================

void BinanceSignature_PubKey::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BinanceSignature_PubKey::BinanceSignature_PubKey()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_TrustWalletCore_2eproto::scc_info_BinanceSignature_PubKey.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:TW.proto.BinanceSignature.PubKey)
}
BinanceSignature_PubKey::BinanceSignature_PubKey(const BinanceSignature_PubKey& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TW.proto.BinanceSignature.PubKey)
}

void BinanceSignature_PubKey::SharedCtor() {
}

BinanceSignature_PubKey::~BinanceSignature_PubKey() {
  // @@protoc_insertion_point(destructor:TW.proto.BinanceSignature.PubKey)
  SharedDtor();
}

void BinanceSignature_PubKey::SharedDtor() {
}

void BinanceSignature_PubKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BinanceSignature_PubKey& BinanceSignature_PubKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_TrustWalletCore_2eproto::scc_info_BinanceSignature_PubKey.base);
  return *internal_default_instance();
}


void BinanceSignature_PubKey::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.proto.BinanceSignature.PubKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool BinanceSignature_PubKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:TW.proto.BinanceSignature.PubKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:TW.proto.BinanceSignature.PubKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TW.proto.BinanceSignature.PubKey)
  return false;
#undef DO_
}

void BinanceSignature_PubKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TW.proto.BinanceSignature.PubKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:TW.proto.BinanceSignature.PubKey)
}

size_t BinanceSignature_PubKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.proto.BinanceSignature.PubKey)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinanceSignature_PubKey::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BinanceSignature_PubKey*>(&from));
}

void BinanceSignature_PubKey::MergeFrom(const BinanceSignature_PubKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.proto.BinanceSignature.PubKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void BinanceSignature_PubKey::CopyFrom(const BinanceSignature_PubKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.proto.BinanceSignature.PubKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinanceSignature_PubKey::IsInitialized() const {
  return true;
}

void BinanceSignature_PubKey::Swap(BinanceSignature_PubKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BinanceSignature_PubKey::InternalSwap(BinanceSignature_PubKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string BinanceSignature_PubKey::GetTypeName() const {
  return "TW.proto.BinanceSignature.PubKey";
}


// ===================================================================

void BinanceSignature::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BinanceSignature::kPubKeyFieldNumber;
const int BinanceSignature::kSignatureFieldNumber;
const int BinanceSignature::kAccountNumberFieldNumber;
const int BinanceSignature::kSequenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BinanceSignature::BinanceSignature()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_TrustWalletCore_2eproto::scc_info_BinanceSignature.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:TW.proto.BinanceSignature)
}
BinanceSignature::BinanceSignature(const BinanceSignature& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pub_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pub_key().size() > 0) {
    pub_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pub_key_);
  }
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.signature().size() > 0) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  ::memcpy(&account_number_, &from.account_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&sequence_) -
    reinterpret_cast<char*>(&account_number_)) + sizeof(sequence_));
  // @@protoc_insertion_point(copy_constructor:TW.proto.BinanceSignature)
}

void BinanceSignature::SharedCtor() {
  pub_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&account_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_) -
      reinterpret_cast<char*>(&account_number_)) + sizeof(sequence_));
}

BinanceSignature::~BinanceSignature() {
  // @@protoc_insertion_point(destructor:TW.proto.BinanceSignature)
  SharedDtor();
}

void BinanceSignature::SharedDtor() {
  pub_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BinanceSignature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BinanceSignature& BinanceSignature::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_TrustWalletCore_2eproto::scc_info_BinanceSignature.base);
  return *internal_default_instance();
}


void BinanceSignature::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.proto.BinanceSignature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pub_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&account_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_) -
      reinterpret_cast<char*>(&account_number_)) + sizeof(sequence_));
  _internal_metadata_.Clear();
}

bool BinanceSignature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:TW.proto.BinanceSignature)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes pub_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pub_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes signature = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint64 account_number = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &account_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint64 sequence = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TW.proto.BinanceSignature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TW.proto.BinanceSignature)
  return false;
#undef DO_
}

void BinanceSignature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TW.proto.BinanceSignature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pub_key = 1;
  if (this->pub_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->pub_key(), output);
  }

  // bytes signature = 2;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->signature(), output);
  }

  // sint64 account_number = 3;
  if (this->account_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->account_number(), output);
  }

  // sint64 sequence = 4;
  if (this->sequence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(4, this->sequence(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:TW.proto.BinanceSignature)
}

size_t BinanceSignature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.proto.BinanceSignature)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // bytes pub_key = 1;
  if (this->pub_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pub_key());
  }

  // bytes signature = 2;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->signature());
  }

  // sint64 account_number = 3;
  if (this->account_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->account_number());
  }

  // sint64 sequence = 4;
  if (this->sequence() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->sequence());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinanceSignature::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BinanceSignature*>(&from));
}

void BinanceSignature::MergeFrom(const BinanceSignature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.proto.BinanceSignature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pub_key().size() > 0) {

    pub_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pub_key_);
  }
  if (from.signature().size() > 0) {

    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  if (from.account_number() != 0) {
    set_account_number(from.account_number());
  }
  if (from.sequence() != 0) {
    set_sequence(from.sequence());
  }
}

void BinanceSignature::CopyFrom(const BinanceSignature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.proto.BinanceSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinanceSignature::IsInitialized() const {
  return true;
}

void BinanceSignature::Swap(BinanceSignature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BinanceSignature::InternalSwap(BinanceSignature* other) {
  using std::swap;
  pub_key_.Swap(&other->pub_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  signature_.Swap(&other->signature_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(account_number_, other->account_number_);
  swap(sequence_, other->sequence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string BinanceSignature::GetTypeName() const {
  return "TW.proto.BinanceSignature";
}


// ===================================================================

void BinanceTradeOrder::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BinanceTradeOrder::kSenderFieldNumber;
const int BinanceTradeOrder::kIdFieldNumber;
const int BinanceTradeOrder::kSymbolFieldNumber;
const int BinanceTradeOrder::kOrdertypeFieldNumber;
const int BinanceTradeOrder::kSideFieldNumber;
const int BinanceTradeOrder::kPriceFieldNumber;
const int BinanceTradeOrder::kQuantityFieldNumber;
const int BinanceTradeOrder::kTimeinforceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BinanceTradeOrder::BinanceTradeOrder()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_TrustWalletCore_2eproto::scc_info_BinanceTradeOrder.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:TW.proto.BinanceTradeOrder)
}
BinanceTradeOrder::BinanceTradeOrder(const BinanceTradeOrder& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sender_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sender().size() > 0) {
    sender_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_);
  }
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.symbol().size() > 0) {
    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  ::memcpy(&ordertype_, &from.ordertype_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeinforce_) -
    reinterpret_cast<char*>(&ordertype_)) + sizeof(timeinforce_));
  // @@protoc_insertion_point(copy_constructor:TW.proto.BinanceTradeOrder)
}

void BinanceTradeOrder::SharedCtor() {
  sender_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ordertype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeinforce_) -
      reinterpret_cast<char*>(&ordertype_)) + sizeof(timeinforce_));
}

BinanceTradeOrder::~BinanceTradeOrder() {
  // @@protoc_insertion_point(destructor:TW.proto.BinanceTradeOrder)
  SharedDtor();
}

void BinanceTradeOrder::SharedDtor() {
  sender_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BinanceTradeOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BinanceTradeOrder& BinanceTradeOrder::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_TrustWalletCore_2eproto::scc_info_BinanceTradeOrder.base);
  return *internal_default_instance();
}


void BinanceTradeOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.proto.BinanceTradeOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ordertype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeinforce_) -
      reinterpret_cast<char*>(&ordertype_)) + sizeof(timeinforce_));
  _internal_metadata_.Clear();
}

bool BinanceTradeOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:TW.proto.BinanceTradeOrder)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes sender = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sender()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TW.proto.BinanceTradeOrder.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string symbol = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TW.proto.BinanceTradeOrder.symbol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint64 ordertype = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &ordertype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint64 side = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &side_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint64 price = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint64 quantity = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &quantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint64 timeinforce = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &timeinforce_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TW.proto.BinanceTradeOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TW.proto.BinanceTradeOrder)
  return false;
#undef DO_
}

void BinanceTradeOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TW.proto.BinanceTradeOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes sender = 1;
  if (this->sender().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->sender(), output);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TW.proto.BinanceTradeOrder.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // string symbol = 3;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TW.proto.BinanceTradeOrder.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->symbol(), output);
  }

  // sint64 ordertype = 4;
  if (this->ordertype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(4, this->ordertype(), output);
  }

  // sint64 side = 5;
  if (this->side() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(5, this->side(), output);
  }

  // sint64 price = 6;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(6, this->price(), output);
  }

  // sint64 quantity = 7;
  if (this->quantity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(7, this->quantity(), output);
  }

  // sint64 timeinforce = 8;
  if (this->timeinforce() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(8, this->timeinforce(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:TW.proto.BinanceTradeOrder)
}

size_t BinanceTradeOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.proto.BinanceTradeOrder)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // bytes sender = 1;
  if (this->sender().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->sender());
  }

  // string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string symbol = 3;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // sint64 ordertype = 4;
  if (this->ordertype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->ordertype());
  }

  // sint64 side = 5;
  if (this->side() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->side());
  }

  // sint64 price = 6;
  if (this->price() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->price());
  }

  // sint64 quantity = 7;
  if (this->quantity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->quantity());
  }

  // sint64 timeinforce = 8;
  if (this->timeinforce() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->timeinforce());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinanceTradeOrder::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BinanceTradeOrder*>(&from));
}

void BinanceTradeOrder::MergeFrom(const BinanceTradeOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.proto.BinanceTradeOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sender().size() > 0) {

    sender_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.ordertype() != 0) {
    set_ordertype(from.ordertype());
  }
  if (from.side() != 0) {
    set_side(from.side());
  }
  if (from.price() != 0) {
    set_price(from.price());
  }
  if (from.quantity() != 0) {
    set_quantity(from.quantity());
  }
  if (from.timeinforce() != 0) {
    set_timeinforce(from.timeinforce());
  }
}

void BinanceTradeOrder::CopyFrom(const BinanceTradeOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.proto.BinanceTradeOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinanceTradeOrder::IsInitialized() const {
  return true;
}

void BinanceTradeOrder::Swap(BinanceTradeOrder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BinanceTradeOrder::InternalSwap(BinanceTradeOrder* other) {
  using std::swap;
  sender_.Swap(&other->sender_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  symbol_.Swap(&other->symbol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ordertype_, other->ordertype_);
  swap(side_, other->side_);
  swap(price_, other->price_);
  swap(quantity_, other->quantity_);
  swap(timeinforce_, other->timeinforce_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string BinanceTradeOrder::GetTypeName() const {
  return "TW.proto.BinanceTradeOrder";
}


// ===================================================================

void BinanceCancelTradeOrder::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BinanceCancelTradeOrder::kSenderFieldNumber;
const int BinanceCancelTradeOrder::kSymbolFieldNumber;
const int BinanceCancelTradeOrder::kRefidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BinanceCancelTradeOrder::BinanceCancelTradeOrder()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_TrustWalletCore_2eproto::scc_info_BinanceCancelTradeOrder.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:TW.proto.BinanceCancelTradeOrder)
}
BinanceCancelTradeOrder::BinanceCancelTradeOrder(const BinanceCancelTradeOrder& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sender_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sender().size() > 0) {
    sender_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_);
  }
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.symbol().size() > 0) {
    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  refid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.refid().size() > 0) {
    refid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.refid_);
  }
  // @@protoc_insertion_point(copy_constructor:TW.proto.BinanceCancelTradeOrder)
}

void BinanceCancelTradeOrder::SharedCtor() {
  sender_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  refid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BinanceCancelTradeOrder::~BinanceCancelTradeOrder() {
  // @@protoc_insertion_point(destructor:TW.proto.BinanceCancelTradeOrder)
  SharedDtor();
}

void BinanceCancelTradeOrder::SharedDtor() {
  sender_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  refid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BinanceCancelTradeOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BinanceCancelTradeOrder& BinanceCancelTradeOrder::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_TrustWalletCore_2eproto::scc_info_BinanceCancelTradeOrder.base);
  return *internal_default_instance();
}


void BinanceCancelTradeOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.proto.BinanceCancelTradeOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  refid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool BinanceCancelTradeOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:TW.proto.BinanceCancelTradeOrder)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes sender = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sender()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string symbol = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TW.proto.BinanceCancelTradeOrder.symbol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string refid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_refid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->refid().data(), static_cast<int>(this->refid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TW.proto.BinanceCancelTradeOrder.refid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TW.proto.BinanceCancelTradeOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TW.proto.BinanceCancelTradeOrder)
  return false;
#undef DO_
}

void BinanceCancelTradeOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TW.proto.BinanceCancelTradeOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes sender = 1;
  if (this->sender().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->sender(), output);
  }

  // string symbol = 2;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TW.proto.BinanceCancelTradeOrder.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->symbol(), output);
  }

  // string refid = 4;
  if (this->refid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->refid().data(), static_cast<int>(this->refid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TW.proto.BinanceCancelTradeOrder.refid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->refid(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:TW.proto.BinanceCancelTradeOrder)
}

size_t BinanceCancelTradeOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.proto.BinanceCancelTradeOrder)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // bytes sender = 1;
  if (this->sender().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->sender());
  }

  // string symbol = 2;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // string refid = 4;
  if (this->refid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->refid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinanceCancelTradeOrder::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BinanceCancelTradeOrder*>(&from));
}

void BinanceCancelTradeOrder::MergeFrom(const BinanceCancelTradeOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.proto.BinanceCancelTradeOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sender().size() > 0) {

    sender_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_);
  }
  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.refid().size() > 0) {

    refid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.refid_);
  }
}

void BinanceCancelTradeOrder::CopyFrom(const BinanceCancelTradeOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.proto.BinanceCancelTradeOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinanceCancelTradeOrder::IsInitialized() const {
  return true;
}

void BinanceCancelTradeOrder::Swap(BinanceCancelTradeOrder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BinanceCancelTradeOrder::InternalSwap(BinanceCancelTradeOrder* other) {
  using std::swap;
  sender_.Swap(&other->sender_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  symbol_.Swap(&other->symbol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  refid_.Swap(&other->refid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string BinanceCancelTradeOrder::GetTypeName() const {
  return "TW.proto.BinanceCancelTradeOrder";
}


// ===================================================================

void BinanceSendOrder_Token::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BinanceSendOrder_Token::kDenomFieldNumber;
const int BinanceSendOrder_Token::kAmountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BinanceSendOrder_Token::BinanceSendOrder_Token()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_TrustWalletCore_2eproto::scc_info_BinanceSendOrder_Token.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:TW.proto.BinanceSendOrder.Token)
}
BinanceSendOrder_Token::BinanceSendOrder_Token(const BinanceSendOrder_Token& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  denom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.denom().size() > 0) {
    denom_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.denom_);
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:TW.proto.BinanceSendOrder.Token)
}

void BinanceSendOrder_Token::SharedCtor() {
  denom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_ = GOOGLE_LONGLONG(0);
}

BinanceSendOrder_Token::~BinanceSendOrder_Token() {
  // @@protoc_insertion_point(destructor:TW.proto.BinanceSendOrder.Token)
  SharedDtor();
}

void BinanceSendOrder_Token::SharedDtor() {
  denom_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BinanceSendOrder_Token::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BinanceSendOrder_Token& BinanceSendOrder_Token::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_TrustWalletCore_2eproto::scc_info_BinanceSendOrder_Token.base);
  return *internal_default_instance();
}


void BinanceSendOrder_Token::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.proto.BinanceSendOrder.Token)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  denom_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool BinanceSendOrder_Token::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:TW.proto.BinanceSendOrder.Token)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string denom = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_denom()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->denom().data(), static_cast<int>(this->denom().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TW.proto.BinanceSendOrder.Token.denom"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint64 amount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TW.proto.BinanceSendOrder.Token)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TW.proto.BinanceSendOrder.Token)
  return false;
#undef DO_
}

void BinanceSendOrder_Token::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TW.proto.BinanceSendOrder.Token)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string denom = 1;
  if (this->denom().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->denom().data(), static_cast<int>(this->denom().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TW.proto.BinanceSendOrder.Token.denom");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->denom(), output);
  }

  // sint64 amount = 2;
  if (this->amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->amount(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:TW.proto.BinanceSendOrder.Token)
}

size_t BinanceSendOrder_Token::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.proto.BinanceSendOrder.Token)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string denom = 1;
  if (this->denom().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->denom());
  }

  // sint64 amount = 2;
  if (this->amount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->amount());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinanceSendOrder_Token::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BinanceSendOrder_Token*>(&from));
}

void BinanceSendOrder_Token::MergeFrom(const BinanceSendOrder_Token& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.proto.BinanceSendOrder.Token)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.denom().size() > 0) {

    denom_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.denom_);
  }
  if (from.amount() != 0) {
    set_amount(from.amount());
  }
}

void BinanceSendOrder_Token::CopyFrom(const BinanceSendOrder_Token& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.proto.BinanceSendOrder.Token)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinanceSendOrder_Token::IsInitialized() const {
  return true;
}

void BinanceSendOrder_Token::Swap(BinanceSendOrder_Token* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BinanceSendOrder_Token::InternalSwap(BinanceSendOrder_Token* other) {
  using std::swap;
  denom_.Swap(&other->denom_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(amount_, other->amount_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string BinanceSendOrder_Token::GetTypeName() const {
  return "TW.proto.BinanceSendOrder.Token";
}


// ===================================================================

void BinanceSendOrder_Input::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BinanceSendOrder_Input::kAddressFieldNumber;
const int BinanceSendOrder_Input::kCoinsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BinanceSendOrder_Input::BinanceSendOrder_Input()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_TrustWalletCore_2eproto::scc_info_BinanceSendOrder_Input.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:TW.proto.BinanceSendOrder.Input)
}
BinanceSendOrder_Input::BinanceSendOrder_Input(const BinanceSendOrder_Input& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      coins_(from.coins_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  // @@protoc_insertion_point(copy_constructor:TW.proto.BinanceSendOrder.Input)
}

void BinanceSendOrder_Input::SharedCtor() {
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BinanceSendOrder_Input::~BinanceSendOrder_Input() {
  // @@protoc_insertion_point(destructor:TW.proto.BinanceSendOrder.Input)
  SharedDtor();
}

void BinanceSendOrder_Input::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BinanceSendOrder_Input::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BinanceSendOrder_Input& BinanceSendOrder_Input::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_TrustWalletCore_2eproto::scc_info_BinanceSendOrder_Input.base);
  return *internal_default_instance();
}


void BinanceSendOrder_Input::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.proto.BinanceSendOrder.Input)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  coins_.Clear();
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool BinanceSendOrder_Input::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:TW.proto.BinanceSendOrder.Input)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TW.proto.BinanceSendOrder.Token coins = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_coins()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TW.proto.BinanceSendOrder.Input)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TW.proto.BinanceSendOrder.Input)
  return false;
#undef DO_
}

void BinanceSendOrder_Input::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TW.proto.BinanceSendOrder.Input)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->address(), output);
  }

  // repeated .TW.proto.BinanceSendOrder.Token coins = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->coins_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2,
      this->coins(static_cast<int>(i)),
      output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:TW.proto.BinanceSendOrder.Input)
}

size_t BinanceSendOrder_Input::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.proto.BinanceSendOrder.Input)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .TW.proto.BinanceSendOrder.Token coins = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->coins_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->coins(static_cast<int>(i)));
    }
  }

  // bytes address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->address());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinanceSendOrder_Input::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BinanceSendOrder_Input*>(&from));
}

void BinanceSendOrder_Input::MergeFrom(const BinanceSendOrder_Input& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.proto.BinanceSendOrder.Input)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  coins_.MergeFrom(from.coins_);
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
}

void BinanceSendOrder_Input::CopyFrom(const BinanceSendOrder_Input& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.proto.BinanceSendOrder.Input)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinanceSendOrder_Input::IsInitialized() const {
  return true;
}

void BinanceSendOrder_Input::Swap(BinanceSendOrder_Input* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BinanceSendOrder_Input::InternalSwap(BinanceSendOrder_Input* other) {
  using std::swap;
  CastToBase(&coins_)->InternalSwap(CastToBase(&other->coins_));
  address_.Swap(&other->address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string BinanceSendOrder_Input::GetTypeName() const {
  return "TW.proto.BinanceSendOrder.Input";
}


// ===================================================================

void BinanceSendOrder_Output::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BinanceSendOrder_Output::kAddressFieldNumber;
const int BinanceSendOrder_Output::kCoinsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BinanceSendOrder_Output::BinanceSendOrder_Output()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_TrustWalletCore_2eproto::scc_info_BinanceSendOrder_Output.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:TW.proto.BinanceSendOrder.Output)
}
BinanceSendOrder_Output::BinanceSendOrder_Output(const BinanceSendOrder_Output& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      coins_(from.coins_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  // @@protoc_insertion_point(copy_constructor:TW.proto.BinanceSendOrder.Output)
}

void BinanceSendOrder_Output::SharedCtor() {
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BinanceSendOrder_Output::~BinanceSendOrder_Output() {
  // @@protoc_insertion_point(destructor:TW.proto.BinanceSendOrder.Output)
  SharedDtor();
}

void BinanceSendOrder_Output::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BinanceSendOrder_Output::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BinanceSendOrder_Output& BinanceSendOrder_Output::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_TrustWalletCore_2eproto::scc_info_BinanceSendOrder_Output.base);
  return *internal_default_instance();
}


void BinanceSendOrder_Output::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.proto.BinanceSendOrder.Output)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  coins_.Clear();
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool BinanceSendOrder_Output::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:TW.proto.BinanceSendOrder.Output)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TW.proto.BinanceSendOrder.Token coins = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_coins()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TW.proto.BinanceSendOrder.Output)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TW.proto.BinanceSendOrder.Output)
  return false;
#undef DO_
}

void BinanceSendOrder_Output::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TW.proto.BinanceSendOrder.Output)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->address(), output);
  }

  // repeated .TW.proto.BinanceSendOrder.Token coins = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->coins_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2,
      this->coins(static_cast<int>(i)),
      output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:TW.proto.BinanceSendOrder.Output)
}

size_t BinanceSendOrder_Output::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.proto.BinanceSendOrder.Output)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .TW.proto.BinanceSendOrder.Token coins = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->coins_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->coins(static_cast<int>(i)));
    }
  }

  // bytes address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->address());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinanceSendOrder_Output::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BinanceSendOrder_Output*>(&from));
}

void BinanceSendOrder_Output::MergeFrom(const BinanceSendOrder_Output& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.proto.BinanceSendOrder.Output)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  coins_.MergeFrom(from.coins_);
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
}

void BinanceSendOrder_Output::CopyFrom(const BinanceSendOrder_Output& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.proto.BinanceSendOrder.Output)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinanceSendOrder_Output::IsInitialized() const {
  return true;
}

void BinanceSendOrder_Output::Swap(BinanceSendOrder_Output* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BinanceSendOrder_Output::InternalSwap(BinanceSendOrder_Output* other) {
  using std::swap;
  CastToBase(&coins_)->InternalSwap(CastToBase(&other->coins_));
  address_.Swap(&other->address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string BinanceSendOrder_Output::GetTypeName() const {
  return "TW.proto.BinanceSendOrder.Output";
}


// ===================================================================

void BinanceSendOrder::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BinanceSendOrder::kInputsFieldNumber;
const int BinanceSendOrder::kOutputsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BinanceSendOrder::BinanceSendOrder()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_TrustWalletCore_2eproto::scc_info_BinanceSendOrder.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:TW.proto.BinanceSendOrder)
}
BinanceSendOrder::BinanceSendOrder(const BinanceSendOrder& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      inputs_(from.inputs_),
      outputs_(from.outputs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TW.proto.BinanceSendOrder)
}

void BinanceSendOrder::SharedCtor() {
}

BinanceSendOrder::~BinanceSendOrder() {
  // @@protoc_insertion_point(destructor:TW.proto.BinanceSendOrder)
  SharedDtor();
}

void BinanceSendOrder::SharedDtor() {
}

void BinanceSendOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BinanceSendOrder& BinanceSendOrder::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_TrustWalletCore_2eproto::scc_info_BinanceSendOrder.base);
  return *internal_default_instance();
}


void BinanceSendOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.proto.BinanceSendOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  outputs_.Clear();
  _internal_metadata_.Clear();
}

bool BinanceSendOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:TW.proto.BinanceSendOrder)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TW.proto.BinanceSendOrder.Input inputs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_inputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TW.proto.BinanceSendOrder.Output outputs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_outputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TW.proto.BinanceSendOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TW.proto.BinanceSendOrder)
  return false;
#undef DO_
}

void BinanceSendOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TW.proto.BinanceSendOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TW.proto.BinanceSendOrder.Input inputs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->inputs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1,
      this->inputs(static_cast<int>(i)),
      output);
  }

  // repeated .TW.proto.BinanceSendOrder.Output outputs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->outputs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2,
      this->outputs(static_cast<int>(i)),
      output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:TW.proto.BinanceSendOrder)
}

size_t BinanceSendOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.proto.BinanceSendOrder)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .TW.proto.BinanceSendOrder.Input inputs = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->inputs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->inputs(static_cast<int>(i)));
    }
  }

  // repeated .TW.proto.BinanceSendOrder.Output outputs = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->outputs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->outputs(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinanceSendOrder::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BinanceSendOrder*>(&from));
}

void BinanceSendOrder::MergeFrom(const BinanceSendOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.proto.BinanceSendOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  outputs_.MergeFrom(from.outputs_);
}

void BinanceSendOrder::CopyFrom(const BinanceSendOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.proto.BinanceSendOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinanceSendOrder::IsInitialized() const {
  return true;
}

void BinanceSendOrder::Swap(BinanceSendOrder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BinanceSendOrder::InternalSwap(BinanceSendOrder* other) {
  using std::swap;
  CastToBase(&inputs_)->InternalSwap(CastToBase(&other->inputs_));
  CastToBase(&outputs_)->InternalSwap(CastToBase(&other->outputs_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string BinanceSendOrder::GetTypeName() const {
  return "TW.proto.BinanceSendOrder";
}


// ===================================================================

void BinanceTokenFreezeOrder::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BinanceTokenFreezeOrder::kFromFieldNumber;
const int BinanceTokenFreezeOrder::kSymbolFieldNumber;
const int BinanceTokenFreezeOrder::kAmountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BinanceTokenFreezeOrder::BinanceTokenFreezeOrder()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_TrustWalletCore_2eproto::scc_info_BinanceTokenFreezeOrder.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:TW.proto.BinanceTokenFreezeOrder)
}
BinanceTokenFreezeOrder::BinanceTokenFreezeOrder(const BinanceTokenFreezeOrder& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.from().size() > 0) {
    from_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_);
  }
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.symbol().size() > 0) {
    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:TW.proto.BinanceTokenFreezeOrder)
}

void BinanceTokenFreezeOrder::SharedCtor() {
  from_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_ = GOOGLE_LONGLONG(0);
}

BinanceTokenFreezeOrder::~BinanceTokenFreezeOrder() {
  // @@protoc_insertion_point(destructor:TW.proto.BinanceTokenFreezeOrder)
  SharedDtor();
}

void BinanceTokenFreezeOrder::SharedDtor() {
  from_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BinanceTokenFreezeOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BinanceTokenFreezeOrder& BinanceTokenFreezeOrder::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_TrustWalletCore_2eproto::scc_info_BinanceTokenFreezeOrder.base);
  return *internal_default_instance();
}


void BinanceTokenFreezeOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.proto.BinanceTokenFreezeOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool BinanceTokenFreezeOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:TW.proto.BinanceTokenFreezeOrder)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes from = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_from()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string symbol = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TW.proto.BinanceTokenFreezeOrder.symbol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint64 amount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TW.proto.BinanceTokenFreezeOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TW.proto.BinanceTokenFreezeOrder)
  return false;
#undef DO_
}

void BinanceTokenFreezeOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TW.proto.BinanceTokenFreezeOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes from = 1;
  if (this->from().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->from(), output);
  }

  // string symbol = 2;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TW.proto.BinanceTokenFreezeOrder.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->symbol(), output);
  }

  // sint64 amount = 3;
  if (this->amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->amount(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:TW.proto.BinanceTokenFreezeOrder)
}

size_t BinanceTokenFreezeOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.proto.BinanceTokenFreezeOrder)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // bytes from = 1;
  if (this->from().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->from());
  }

  // string symbol = 2;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // sint64 amount = 3;
  if (this->amount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->amount());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinanceTokenFreezeOrder::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BinanceTokenFreezeOrder*>(&from));
}

void BinanceTokenFreezeOrder::MergeFrom(const BinanceTokenFreezeOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.proto.BinanceTokenFreezeOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from().size() > 0) {

    from_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_);
  }
  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.amount() != 0) {
    set_amount(from.amount());
  }
}

void BinanceTokenFreezeOrder::CopyFrom(const BinanceTokenFreezeOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.proto.BinanceTokenFreezeOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinanceTokenFreezeOrder::IsInitialized() const {
  return true;
}

void BinanceTokenFreezeOrder::Swap(BinanceTokenFreezeOrder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BinanceTokenFreezeOrder::InternalSwap(BinanceTokenFreezeOrder* other) {
  using std::swap;
  from_.Swap(&other->from_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  symbol_.Swap(&other->symbol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(amount_, other->amount_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string BinanceTokenFreezeOrder::GetTypeName() const {
  return "TW.proto.BinanceTokenFreezeOrder";
}


// ===================================================================

void BinanceTokenUnfreezeOrder::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BinanceTokenUnfreezeOrder::kFromFieldNumber;
const int BinanceTokenUnfreezeOrder::kSymbolFieldNumber;
const int BinanceTokenUnfreezeOrder::kAmountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BinanceTokenUnfreezeOrder::BinanceTokenUnfreezeOrder()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_TrustWalletCore_2eproto::scc_info_BinanceTokenUnfreezeOrder.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:TW.proto.BinanceTokenUnfreezeOrder)
}
BinanceTokenUnfreezeOrder::BinanceTokenUnfreezeOrder(const BinanceTokenUnfreezeOrder& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.from().size() > 0) {
    from_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_);
  }
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.symbol().size() > 0) {
    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:TW.proto.BinanceTokenUnfreezeOrder)
}

void BinanceTokenUnfreezeOrder::SharedCtor() {
  from_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_ = GOOGLE_LONGLONG(0);
}

BinanceTokenUnfreezeOrder::~BinanceTokenUnfreezeOrder() {
  // @@protoc_insertion_point(destructor:TW.proto.BinanceTokenUnfreezeOrder)
  SharedDtor();
}

void BinanceTokenUnfreezeOrder::SharedDtor() {
  from_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BinanceTokenUnfreezeOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BinanceTokenUnfreezeOrder& BinanceTokenUnfreezeOrder::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_TrustWalletCore_2eproto::scc_info_BinanceTokenUnfreezeOrder.base);
  return *internal_default_instance();
}


void BinanceTokenUnfreezeOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.proto.BinanceTokenUnfreezeOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool BinanceTokenUnfreezeOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:TW.proto.BinanceTokenUnfreezeOrder)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes from = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_from()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string symbol = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TW.proto.BinanceTokenUnfreezeOrder.symbol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint64 amount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TW.proto.BinanceTokenUnfreezeOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TW.proto.BinanceTokenUnfreezeOrder)
  return false;
#undef DO_
}

void BinanceTokenUnfreezeOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TW.proto.BinanceTokenUnfreezeOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes from = 1;
  if (this->from().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->from(), output);
  }

  // string symbol = 2;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TW.proto.BinanceTokenUnfreezeOrder.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->symbol(), output);
  }

  // sint64 amount = 3;
  if (this->amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->amount(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:TW.proto.BinanceTokenUnfreezeOrder)
}

size_t BinanceTokenUnfreezeOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.proto.BinanceTokenUnfreezeOrder)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // bytes from = 1;
  if (this->from().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->from());
  }

  // string symbol = 2;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // sint64 amount = 3;
  if (this->amount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->amount());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinanceTokenUnfreezeOrder::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BinanceTokenUnfreezeOrder*>(&from));
}

void BinanceTokenUnfreezeOrder::MergeFrom(const BinanceTokenUnfreezeOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.proto.BinanceTokenUnfreezeOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from().size() > 0) {

    from_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_);
  }
  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.amount() != 0) {
    set_amount(from.amount());
  }
}

void BinanceTokenUnfreezeOrder::CopyFrom(const BinanceTokenUnfreezeOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.proto.BinanceTokenUnfreezeOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinanceTokenUnfreezeOrder::IsInitialized() const {
  return true;
}

void BinanceTokenUnfreezeOrder::Swap(BinanceTokenUnfreezeOrder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BinanceTokenUnfreezeOrder::InternalSwap(BinanceTokenUnfreezeOrder* other) {
  using std::swap;
  from_.Swap(&other->from_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  symbol_.Swap(&other->symbol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(amount_, other->amount_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string BinanceTokenUnfreezeOrder::GetTypeName() const {
  return "TW.proto.BinanceTokenUnfreezeOrder";
}


// ===================================================================

void BinanceSigningInput::InitAsDefaultInstance() {
}
void BinanceSigningInput::set_allocated_trade_order(::TW::proto::BinanceTradeOrder* trade_order) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_order_oneof();
  if (trade_order) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      trade_order = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, trade_order, submessage_arena);
    }
    set_has_trade_order();
    order_oneof_.trade_order_ = trade_order;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.proto.BinanceSigningInput.trade_order)
}
void BinanceSigningInput::set_allocated_cancel_trade_order(::TW::proto::BinanceCancelTradeOrder* cancel_trade_order) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_order_oneof();
  if (cancel_trade_order) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cancel_trade_order = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cancel_trade_order, submessage_arena);
    }
    set_has_cancel_trade_order();
    order_oneof_.cancel_trade_order_ = cancel_trade_order;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.proto.BinanceSigningInput.cancel_trade_order)
}
void BinanceSigningInput::set_allocated_send_order(::TW::proto::BinanceSendOrder* send_order) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_order_oneof();
  if (send_order) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      send_order = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, send_order, submessage_arena);
    }
    set_has_send_order();
    order_oneof_.send_order_ = send_order;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.proto.BinanceSigningInput.send_order)
}
void BinanceSigningInput::set_allocated_freeze_order(::TW::proto::BinanceTokenFreezeOrder* freeze_order) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_order_oneof();
  if (freeze_order) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      freeze_order = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, freeze_order, submessage_arena);
    }
    set_has_freeze_order();
    order_oneof_.freeze_order_ = freeze_order;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.proto.BinanceSigningInput.freeze_order)
}
void BinanceSigningInput::set_allocated_unfreeze_order(::TW::proto::BinanceTokenUnfreezeOrder* unfreeze_order) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_order_oneof();
  if (unfreeze_order) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      unfreeze_order = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, unfreeze_order, submessage_arena);
    }
    set_has_unfreeze_order();
    order_oneof_.unfreeze_order_ = unfreeze_order;
  }
  // @@protoc_insertion_point(field_set_allocated:TW.proto.BinanceSigningInput.unfreeze_order)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BinanceSigningInput::kChainIdFieldNumber;
const int BinanceSigningInput::kAccountNumberFieldNumber;
const int BinanceSigningInput::kSequenceFieldNumber;
const int BinanceSigningInput::kSourceFieldNumber;
const int BinanceSigningInput::kMemoFieldNumber;
const int BinanceSigningInput::kPrivateKeyFieldNumber;
const int BinanceSigningInput::kTradeOrderFieldNumber;
const int BinanceSigningInput::kCancelTradeOrderFieldNumber;
const int BinanceSigningInput::kSendOrderFieldNumber;
const int BinanceSigningInput::kFreezeOrderFieldNumber;
const int BinanceSigningInput::kUnfreezeOrderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BinanceSigningInput::BinanceSigningInput()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_TrustWalletCore_2eproto::scc_info_BinanceSigningInput.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:TW.proto.BinanceSigningInput)
}
BinanceSigningInput::BinanceSigningInput(const BinanceSigningInput& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chain_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.chain_id().size() > 0) {
    chain_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chain_id_);
  }
  memo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.memo().size() > 0) {
    memo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.memo_);
  }
  private_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.private_key().size() > 0) {
    private_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_key_);
  }
  ::memcpy(&account_number_, &from.account_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_) -
    reinterpret_cast<char*>(&account_number_)) + sizeof(source_));
  clear_has_order_oneof();
  switch (from.order_oneof_case()) {
    case kTradeOrder: {
      mutable_trade_order()->::TW::proto::BinanceTradeOrder::MergeFrom(from.trade_order());
      break;
    }
    case kCancelTradeOrder: {
      mutable_cancel_trade_order()->::TW::proto::BinanceCancelTradeOrder::MergeFrom(from.cancel_trade_order());
      break;
    }
    case kSendOrder: {
      mutable_send_order()->::TW::proto::BinanceSendOrder::MergeFrom(from.send_order());
      break;
    }
    case kFreezeOrder: {
      mutable_freeze_order()->::TW::proto::BinanceTokenFreezeOrder::MergeFrom(from.freeze_order());
      break;
    }
    case kUnfreezeOrder: {
      mutable_unfreeze_order()->::TW::proto::BinanceTokenUnfreezeOrder::MergeFrom(from.unfreeze_order());
      break;
    }
    case ORDER_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TW.proto.BinanceSigningInput)
}

void BinanceSigningInput::SharedCtor() {
  chain_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  memo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  private_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&account_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_) -
      reinterpret_cast<char*>(&account_number_)) + sizeof(source_));
  clear_has_order_oneof();
}

BinanceSigningInput::~BinanceSigningInput() {
  // @@protoc_insertion_point(destructor:TW.proto.BinanceSigningInput)
  SharedDtor();
}

void BinanceSigningInput::SharedDtor() {
  chain_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  memo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  private_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_order_oneof()) {
    clear_order_oneof();
  }
}

void BinanceSigningInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BinanceSigningInput& BinanceSigningInput::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_TrustWalletCore_2eproto::scc_info_BinanceSigningInput.base);
  return *internal_default_instance();
}


void BinanceSigningInput::clear_order_oneof() {
// @@protoc_insertion_point(one_of_clear_start:TW.proto.BinanceSigningInput)
  switch (order_oneof_case()) {
    case kTradeOrder: {
      delete order_oneof_.trade_order_;
      break;
    }
    case kCancelTradeOrder: {
      delete order_oneof_.cancel_trade_order_;
      break;
    }
    case kSendOrder: {
      delete order_oneof_.send_order_;
      break;
    }
    case kFreezeOrder: {
      delete order_oneof_.freeze_order_;
      break;
    }
    case kUnfreezeOrder: {
      delete order_oneof_.unfreeze_order_;
      break;
    }
    case ORDER_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ORDER_ONEOF_NOT_SET;
}


void BinanceSigningInput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.proto.BinanceSigningInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chain_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  memo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  private_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&account_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_) -
      reinterpret_cast<char*>(&account_number_)) + sizeof(source_));
  clear_order_oneof();
  _internal_metadata_.Clear();
}

bool BinanceSigningInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:TW.proto.BinanceSigningInput)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string chain_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chain_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->chain_id().data(), static_cast<int>(this->chain_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TW.proto.BinanceSigningInput.chain_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint64 account_number = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &account_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint64 sequence = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint64 source = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string memo = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_memo()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->memo().data(), static_cast<int>(this->memo().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TW.proto.BinanceSigningInput.memo"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes private_key = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_private_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TW.proto.BinanceTradeOrder trade_order = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_trade_order()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TW.proto.BinanceCancelTradeOrder cancel_trade_order = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cancel_trade_order()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TW.proto.BinanceSendOrder send_order = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_send_order()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TW.proto.BinanceTokenFreezeOrder freeze_order = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_freeze_order()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TW.proto.BinanceTokenUnfreezeOrder unfreeze_order = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_unfreeze_order()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TW.proto.BinanceSigningInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TW.proto.BinanceSigningInput)
  return false;
#undef DO_
}

void BinanceSigningInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TW.proto.BinanceSigningInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string chain_id = 1;
  if (this->chain_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chain_id().data(), static_cast<int>(this->chain_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TW.proto.BinanceSigningInput.chain_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->chain_id(), output);
  }

  // sint64 account_number = 2;
  if (this->account_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->account_number(), output);
  }

  // sint64 sequence = 3;
  if (this->sequence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->sequence(), output);
  }

  // sint64 source = 4;
  if (this->source() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(4, this->source(), output);
  }

  // string memo = 5;
  if (this->memo().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->memo().data(), static_cast<int>(this->memo().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TW.proto.BinanceSigningInput.memo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->memo(), output);
  }

  // bytes private_key = 6;
  if (this->private_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->private_key(), output);
  }

  // .TW.proto.BinanceTradeOrder trade_order = 7;
  if (has_trade_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->_internal_trade_order(), output);
  }

  // .TW.proto.BinanceCancelTradeOrder cancel_trade_order = 8;
  if (has_cancel_trade_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->_internal_cancel_trade_order(), output);
  }

  // .TW.proto.BinanceSendOrder send_order = 9;
  if (has_send_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->_internal_send_order(), output);
  }

  // .TW.proto.BinanceTokenFreezeOrder freeze_order = 10;
  if (has_freeze_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->_internal_freeze_order(), output);
  }

  // .TW.proto.BinanceTokenUnfreezeOrder unfreeze_order = 11;
  if (has_unfreeze_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->_internal_unfreeze_order(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:TW.proto.BinanceSigningInput)
}

size_t BinanceSigningInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.proto.BinanceSigningInput)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string chain_id = 1;
  if (this->chain_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chain_id());
  }

  // string memo = 5;
  if (this->memo().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->memo());
  }

  // bytes private_key = 6;
  if (this->private_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->private_key());
  }

  // sint64 account_number = 2;
  if (this->account_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->account_number());
  }

  // sint64 sequence = 3;
  if (this->sequence() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->sequence());
  }

  // sint64 source = 4;
  if (this->source() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->source());
  }

  switch (order_oneof_case()) {
    // .TW.proto.BinanceTradeOrder trade_order = 7;
    case kTradeOrder: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *order_oneof_.trade_order_);
      break;
    }
    // .TW.proto.BinanceCancelTradeOrder cancel_trade_order = 8;
    case kCancelTradeOrder: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *order_oneof_.cancel_trade_order_);
      break;
    }
    // .TW.proto.BinanceSendOrder send_order = 9;
    case kSendOrder: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *order_oneof_.send_order_);
      break;
    }
    // .TW.proto.BinanceTokenFreezeOrder freeze_order = 10;
    case kFreezeOrder: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *order_oneof_.freeze_order_);
      break;
    }
    // .TW.proto.BinanceTokenUnfreezeOrder unfreeze_order = 11;
    case kUnfreezeOrder: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *order_oneof_.unfreeze_order_);
      break;
    }
    case ORDER_ONEOF_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinanceSigningInput::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BinanceSigningInput*>(&from));
}

void BinanceSigningInput::MergeFrom(const BinanceSigningInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.proto.BinanceSigningInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chain_id().size() > 0) {

    chain_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chain_id_);
  }
  if (from.memo().size() > 0) {

    memo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.memo_);
  }
  if (from.private_key().size() > 0) {

    private_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_key_);
  }
  if (from.account_number() != 0) {
    set_account_number(from.account_number());
  }
  if (from.sequence() != 0) {
    set_sequence(from.sequence());
  }
  if (from.source() != 0) {
    set_source(from.source());
  }
  switch (from.order_oneof_case()) {
    case kTradeOrder: {
      mutable_trade_order()->::TW::proto::BinanceTradeOrder::MergeFrom(from.trade_order());
      break;
    }
    case kCancelTradeOrder: {
      mutable_cancel_trade_order()->::TW::proto::BinanceCancelTradeOrder::MergeFrom(from.cancel_trade_order());
      break;
    }
    case kSendOrder: {
      mutable_send_order()->::TW::proto::BinanceSendOrder::MergeFrom(from.send_order());
      break;
    }
    case kFreezeOrder: {
      mutable_freeze_order()->::TW::proto::BinanceTokenFreezeOrder::MergeFrom(from.freeze_order());
      break;
    }
    case kUnfreezeOrder: {
      mutable_unfreeze_order()->::TW::proto::BinanceTokenUnfreezeOrder::MergeFrom(from.unfreeze_order());
      break;
    }
    case ORDER_ONEOF_NOT_SET: {
      break;
    }
  }
}

void BinanceSigningInput::CopyFrom(const BinanceSigningInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.proto.BinanceSigningInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinanceSigningInput::IsInitialized() const {
  return true;
}

void BinanceSigningInput::Swap(BinanceSigningInput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BinanceSigningInput::InternalSwap(BinanceSigningInput* other) {
  using std::swap;
  chain_id_.Swap(&other->chain_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  memo_.Swap(&other->memo_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  private_key_.Swap(&other->private_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(account_number_, other->account_number_);
  swap(sequence_, other->sequence_);
  swap(source_, other->source_);
  swap(order_oneof_, other->order_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string BinanceSigningInput::GetTypeName() const {
  return "TW.proto.BinanceSigningInput";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace TW
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::TW::proto::BitcoinOutPoint* Arena::CreateMaybeMessage< ::TW::proto::BitcoinOutPoint >(Arena* arena) {
  return Arena::CreateInternal< ::TW::proto::BitcoinOutPoint >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::TW::proto::BitcoinUnspentTransaction* Arena::CreateMaybeMessage< ::TW::proto::BitcoinUnspentTransaction >(Arena* arena) {
  return Arena::CreateInternal< ::TW::proto::BitcoinUnspentTransaction >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::TW::proto::BitcoinSigningInput_ScriptsEntry_DoNotUse* Arena::CreateMaybeMessage< ::TW::proto::BitcoinSigningInput_ScriptsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::TW::proto::BitcoinSigningInput_ScriptsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::TW::proto::BitcoinSigningInput* Arena::CreateMaybeMessage< ::TW::proto::BitcoinSigningInput >(Arena* arena) {
  return Arena::CreateInternal< ::TW::proto::BitcoinSigningInput >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::TW::proto::BinanceTransaction* Arena::CreateMaybeMessage< ::TW::proto::BinanceTransaction >(Arena* arena) {
  return Arena::CreateInternal< ::TW::proto::BinanceTransaction >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::TW::proto::BinanceSignature_PubKey* Arena::CreateMaybeMessage< ::TW::proto::BinanceSignature_PubKey >(Arena* arena) {
  return Arena::CreateInternal< ::TW::proto::BinanceSignature_PubKey >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::TW::proto::BinanceSignature* Arena::CreateMaybeMessage< ::TW::proto::BinanceSignature >(Arena* arena) {
  return Arena::CreateInternal< ::TW::proto::BinanceSignature >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::TW::proto::BinanceTradeOrder* Arena::CreateMaybeMessage< ::TW::proto::BinanceTradeOrder >(Arena* arena) {
  return Arena::CreateInternal< ::TW::proto::BinanceTradeOrder >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::TW::proto::BinanceCancelTradeOrder* Arena::CreateMaybeMessage< ::TW::proto::BinanceCancelTradeOrder >(Arena* arena) {
  return Arena::CreateInternal< ::TW::proto::BinanceCancelTradeOrder >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::TW::proto::BinanceSendOrder_Token* Arena::CreateMaybeMessage< ::TW::proto::BinanceSendOrder_Token >(Arena* arena) {
  return Arena::CreateInternal< ::TW::proto::BinanceSendOrder_Token >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::TW::proto::BinanceSendOrder_Input* Arena::CreateMaybeMessage< ::TW::proto::BinanceSendOrder_Input >(Arena* arena) {
  return Arena::CreateInternal< ::TW::proto::BinanceSendOrder_Input >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::TW::proto::BinanceSendOrder_Output* Arena::CreateMaybeMessage< ::TW::proto::BinanceSendOrder_Output >(Arena* arena) {
  return Arena::CreateInternal< ::TW::proto::BinanceSendOrder_Output >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::TW::proto::BinanceSendOrder* Arena::CreateMaybeMessage< ::TW::proto::BinanceSendOrder >(Arena* arena) {
  return Arena::CreateInternal< ::TW::proto::BinanceSendOrder >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::TW::proto::BinanceTokenFreezeOrder* Arena::CreateMaybeMessage< ::TW::proto::BinanceTokenFreezeOrder >(Arena* arena) {
  return Arena::CreateInternal< ::TW::proto::BinanceTokenFreezeOrder >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::TW::proto::BinanceTokenUnfreezeOrder* Arena::CreateMaybeMessage< ::TW::proto::BinanceTokenUnfreezeOrder >(Arena* arena) {
  return Arena::CreateInternal< ::TW::proto::BinanceTokenUnfreezeOrder >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::TW::proto::BinanceSigningInput* Arena::CreateMaybeMessage< ::TW::proto::BinanceSigningInput >(Arena* arena) {
  return Arena::CreateInternal< ::TW::proto::BinanceSigningInput >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
