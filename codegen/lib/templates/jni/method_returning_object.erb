<%  method = locals[:method] -%>
<%= render('jni/method_prototype.erb', { method: method }) %> {
    jclass thisClass = (*env)->GetObjectClass(env, thisObject);
<%  if entity.is_struct -%>
    jfieldID bytesFieldID = (*env)->GetFieldID(env, thisClass, "bytes", "[b");
    jbyteArray bytesArray = (*env)->GetObjectField(env, thisObject, bytesFieldID);
    jbyte* bytesBuffer = (*env)->GetByteArrayElements(env, bytesArray, NULL);
    struct TW<%= entity.name %> *instance = (struct TW<%= entity.name %> *) bytesBuffer;
<%  else -%>
    jfieldID handleFieldID = (*env)->GetFieldID(env, thisClass, "nativeHandle", "J");
    struct TW<%= entity.name %> *instance = (struct TW<%= entity.name %> *) (*env)->GetLongField(env, thisObject, handleFieldID);
<%  end -%>
<%= render('jni/parameter_access.erb', { parameters: method.parameters.drop(1) }) -%>
<%  if method.entity.is_struct -%>
    struct TW<%= method.return_type.name %> result = <%= render('jni/method_call.erb', { method: method }) %>;
<%  else -%>
    TW<%= method.return_type.name %> *result = <%= render('jni/method_call.erb', { method: method }) %>;
<%  end -%>
<%= render('jni/parameter_release.erb', { parameters: method.parameters.drop(1) }) -%>
<%  if entity.is_struct -%>
    (*env)->ReleaseByteArrayElements(env, bytesArray, bytesBuffer, JNI_ABORT);

<%  end -%>
    jclass class = (*env)->FindClass(env, "com/wallet/crypto/trustapp/jni/<%= method.return_type.name %>");
<%  if method.entity.is_struct -%>
    jbyteArray resultArray = (*env)->NewByteArray(env, sizeof(struct TW<%= method.return_type.name %>));
    (*env)->SetByteArrayRegion(env, resultArray, 0, sizeof(struct TW<%= method.return_type.name %>), (jbyte *) &result);
    jmethodID init = (*env)->GetMethodID(env, class, "createFromNative", "([b)V");
    return (*env)->NewObject(env, class, init, resultArray);
<%  else -%>
    jmethodID init = (*env)->GetMethodID(env, class, "createFromNative", "(J)V");
    return (*env)->NewObject(env, class, init, (jlong) result);
<%  end -%>
}
