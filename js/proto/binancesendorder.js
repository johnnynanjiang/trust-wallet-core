/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.TW.proto.BinanceSendOrder');
goog.provide('proto.TW.proto.BinanceSendOrder.Input');
goog.provide('proto.TW.proto.BinanceSendOrder.Output');
goog.provide('proto.TW.proto.BinanceSendOrder.Token');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TW.proto.BinanceSendOrder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TW.proto.BinanceSendOrder.repeatedFields_, null);
};
goog.inherits(proto.TW.proto.BinanceSendOrder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TW.proto.BinanceSendOrder.displayName = 'proto.TW.proto.BinanceSendOrder';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TW.proto.BinanceSendOrder.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TW.proto.BinanceSendOrder.prototype.toObject = function(opt_includeInstance) {
  return proto.TW.proto.BinanceSendOrder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TW.proto.BinanceSendOrder} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TW.proto.BinanceSendOrder.toObject = function(includeInstance, msg) {
  var f, obj = {
    inputsList: jspb.Message.toObjectList(msg.getInputsList(),
    proto.TW.proto.BinanceSendOrder.Input.toObject, includeInstance),
    outputsList: jspb.Message.toObjectList(msg.getOutputsList(),
    proto.TW.proto.BinanceSendOrder.Output.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TW.proto.BinanceSendOrder}
 */
proto.TW.proto.BinanceSendOrder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TW.proto.BinanceSendOrder;
  return proto.TW.proto.BinanceSendOrder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TW.proto.BinanceSendOrder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TW.proto.BinanceSendOrder}
 */
proto.TW.proto.BinanceSendOrder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.TW.proto.BinanceSendOrder.Input;
      reader.readMessage(value,proto.TW.proto.BinanceSendOrder.Input.deserializeBinaryFromReader);
      msg.addInputs(value);
      break;
    case 2:
      var value = new proto.TW.proto.BinanceSendOrder.Output;
      reader.readMessage(value,proto.TW.proto.BinanceSendOrder.Output.deserializeBinaryFromReader);
      msg.addOutputs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TW.proto.BinanceSendOrder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TW.proto.BinanceSendOrder.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TW.proto.BinanceSendOrder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TW.proto.BinanceSendOrder.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.TW.proto.BinanceSendOrder.Input.serializeBinaryToWriter
    );
  }
  f = message.getOutputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.TW.proto.BinanceSendOrder.Output.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TW.proto.BinanceSendOrder.Token = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TW.proto.BinanceSendOrder.Token, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TW.proto.BinanceSendOrder.Token.displayName = 'proto.TW.proto.BinanceSendOrder.Token';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TW.proto.BinanceSendOrder.Token.prototype.toObject = function(opt_includeInstance) {
  return proto.TW.proto.BinanceSendOrder.Token.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TW.proto.BinanceSendOrder.Token} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TW.proto.BinanceSendOrder.Token.toObject = function(includeInstance, msg) {
  var f, obj = {
    denom: jspb.Message.getFieldWithDefault(msg, 1, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TW.proto.BinanceSendOrder.Token}
 */
proto.TW.proto.BinanceSendOrder.Token.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TW.proto.BinanceSendOrder.Token;
  return proto.TW.proto.BinanceSendOrder.Token.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TW.proto.BinanceSendOrder.Token} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TW.proto.BinanceSendOrder.Token}
 */
proto.TW.proto.BinanceSendOrder.Token.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDenom(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TW.proto.BinanceSendOrder.Token.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TW.proto.BinanceSendOrder.Token.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TW.proto.BinanceSendOrder.Token} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TW.proto.BinanceSendOrder.Token.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDenom();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional string denom = 1;
 * @return {string}
 */
proto.TW.proto.BinanceSendOrder.Token.prototype.getDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.TW.proto.BinanceSendOrder.Token.prototype.setDenom = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 amount = 2;
 * @return {number}
 */
proto.TW.proto.BinanceSendOrder.Token.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.TW.proto.BinanceSendOrder.Token.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TW.proto.BinanceSendOrder.Input = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TW.proto.BinanceSendOrder.Input.repeatedFields_, null);
};
goog.inherits(proto.TW.proto.BinanceSendOrder.Input, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TW.proto.BinanceSendOrder.Input.displayName = 'proto.TW.proto.BinanceSendOrder.Input';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TW.proto.BinanceSendOrder.Input.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TW.proto.BinanceSendOrder.Input.prototype.toObject = function(opt_includeInstance) {
  return proto.TW.proto.BinanceSendOrder.Input.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TW.proto.BinanceSendOrder.Input} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TW.proto.BinanceSendOrder.Input.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: msg.getAddress_asB64(),
    coinsList: jspb.Message.toObjectList(msg.getCoinsList(),
    proto.TW.proto.BinanceSendOrder.Token.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TW.proto.BinanceSendOrder.Input}
 */
proto.TW.proto.BinanceSendOrder.Input.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TW.proto.BinanceSendOrder.Input;
  return proto.TW.proto.BinanceSendOrder.Input.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TW.proto.BinanceSendOrder.Input} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TW.proto.BinanceSendOrder.Input}
 */
proto.TW.proto.BinanceSendOrder.Input.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    case 2:
      var value = new proto.TW.proto.BinanceSendOrder.Token;
      reader.readMessage(value,proto.TW.proto.BinanceSendOrder.Token.deserializeBinaryFromReader);
      msg.addCoins(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TW.proto.BinanceSendOrder.Input.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TW.proto.BinanceSendOrder.Input.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TW.proto.BinanceSendOrder.Input} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TW.proto.BinanceSendOrder.Input.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getCoinsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.TW.proto.BinanceSendOrder.Token.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes address = 1;
 * @return {string}
 */
proto.TW.proto.BinanceSendOrder.Input.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.TW.proto.BinanceSendOrder.Input.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.TW.proto.BinanceSendOrder.Input.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/** @param {!(string|Uint8Array)} value */
proto.TW.proto.BinanceSendOrder.Input.prototype.setAddress = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated Token coins = 2;
 * @return {!Array<!proto.TW.proto.BinanceSendOrder.Token>}
 */
proto.TW.proto.BinanceSendOrder.Input.prototype.getCoinsList = function() {
  return /** @type{!Array<!proto.TW.proto.BinanceSendOrder.Token>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TW.proto.BinanceSendOrder.Token, 2));
};


/** @param {!Array<!proto.TW.proto.BinanceSendOrder.Token>} value */
proto.TW.proto.BinanceSendOrder.Input.prototype.setCoinsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.TW.proto.BinanceSendOrder.Token=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TW.proto.BinanceSendOrder.Token}
 */
proto.TW.proto.BinanceSendOrder.Input.prototype.addCoins = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.TW.proto.BinanceSendOrder.Token, opt_index);
};


proto.TW.proto.BinanceSendOrder.Input.prototype.clearCoinsList = function() {
  this.setCoinsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TW.proto.BinanceSendOrder.Output = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TW.proto.BinanceSendOrder.Output.repeatedFields_, null);
};
goog.inherits(proto.TW.proto.BinanceSendOrder.Output, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TW.proto.BinanceSendOrder.Output.displayName = 'proto.TW.proto.BinanceSendOrder.Output';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TW.proto.BinanceSendOrder.Output.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TW.proto.BinanceSendOrder.Output.prototype.toObject = function(opt_includeInstance) {
  return proto.TW.proto.BinanceSendOrder.Output.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TW.proto.BinanceSendOrder.Output} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TW.proto.BinanceSendOrder.Output.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: msg.getAddress_asB64(),
    coinsList: jspb.Message.toObjectList(msg.getCoinsList(),
    proto.TW.proto.BinanceSendOrder.Token.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TW.proto.BinanceSendOrder.Output}
 */
proto.TW.proto.BinanceSendOrder.Output.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TW.proto.BinanceSendOrder.Output;
  return proto.TW.proto.BinanceSendOrder.Output.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TW.proto.BinanceSendOrder.Output} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TW.proto.BinanceSendOrder.Output}
 */
proto.TW.proto.BinanceSendOrder.Output.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    case 2:
      var value = new proto.TW.proto.BinanceSendOrder.Token;
      reader.readMessage(value,proto.TW.proto.BinanceSendOrder.Token.deserializeBinaryFromReader);
      msg.addCoins(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TW.proto.BinanceSendOrder.Output.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TW.proto.BinanceSendOrder.Output.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TW.proto.BinanceSendOrder.Output} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TW.proto.BinanceSendOrder.Output.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getCoinsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.TW.proto.BinanceSendOrder.Token.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes address = 1;
 * @return {string}
 */
proto.TW.proto.BinanceSendOrder.Output.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.TW.proto.BinanceSendOrder.Output.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.TW.proto.BinanceSendOrder.Output.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/** @param {!(string|Uint8Array)} value */
proto.TW.proto.BinanceSendOrder.Output.prototype.setAddress = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated Token coins = 2;
 * @return {!Array<!proto.TW.proto.BinanceSendOrder.Token>}
 */
proto.TW.proto.BinanceSendOrder.Output.prototype.getCoinsList = function() {
  return /** @type{!Array<!proto.TW.proto.BinanceSendOrder.Token>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TW.proto.BinanceSendOrder.Token, 2));
};


/** @param {!Array<!proto.TW.proto.BinanceSendOrder.Token>} value */
proto.TW.proto.BinanceSendOrder.Output.prototype.setCoinsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.TW.proto.BinanceSendOrder.Token=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TW.proto.BinanceSendOrder.Token}
 */
proto.TW.proto.BinanceSendOrder.Output.prototype.addCoins = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.TW.proto.BinanceSendOrder.Token, opt_index);
};


proto.TW.proto.BinanceSendOrder.Output.prototype.clearCoinsList = function() {
  this.setCoinsList([]);
};


/**
 * repeated Input inputs = 1;
 * @return {!Array<!proto.TW.proto.BinanceSendOrder.Input>}
 */
proto.TW.proto.BinanceSendOrder.prototype.getInputsList = function() {
  return /** @type{!Array<!proto.TW.proto.BinanceSendOrder.Input>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TW.proto.BinanceSendOrder.Input, 1));
};


/** @param {!Array<!proto.TW.proto.BinanceSendOrder.Input>} value */
proto.TW.proto.BinanceSendOrder.prototype.setInputsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.TW.proto.BinanceSendOrder.Input=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TW.proto.BinanceSendOrder.Input}
 */
proto.TW.proto.BinanceSendOrder.prototype.addInputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.TW.proto.BinanceSendOrder.Input, opt_index);
};


proto.TW.proto.BinanceSendOrder.prototype.clearInputsList = function() {
  this.setInputsList([]);
};


/**
 * repeated Output outputs = 2;
 * @return {!Array<!proto.TW.proto.BinanceSendOrder.Output>}
 */
proto.TW.proto.BinanceSendOrder.prototype.getOutputsList = function() {
  return /** @type{!Array<!proto.TW.proto.BinanceSendOrder.Output>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TW.proto.BinanceSendOrder.Output, 2));
};


/** @param {!Array<!proto.TW.proto.BinanceSendOrder.Output>} value */
proto.TW.proto.BinanceSendOrder.prototype.setOutputsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.TW.proto.BinanceSendOrder.Output=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TW.proto.BinanceSendOrder.Output}
 */
proto.TW.proto.BinanceSendOrder.prototype.addOutputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.TW.proto.BinanceSendOrder.Output, opt_index);
};


proto.TW.proto.BinanceSendOrder.prototype.clearOutputsList = function() {
  this.setOutputsList([]);
};


