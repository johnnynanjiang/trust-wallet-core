/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.TW.proto.BinanceSigningInput');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.TW.proto.BinanceCancelTradeOrder');
goog.require('proto.TW.proto.BinanceSendOrder');
goog.require('proto.TW.proto.BinanceTokenFreezeOrder');
goog.require('proto.TW.proto.BinanceTokenUnfreezeOrder');
goog.require('proto.TW.proto.BinanceTradeOrder');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TW.proto.BinanceSigningInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.TW.proto.BinanceSigningInput.oneofGroups_);
};
goog.inherits(proto.TW.proto.BinanceSigningInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TW.proto.BinanceSigningInput.displayName = 'proto.TW.proto.BinanceSigningInput';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.TW.proto.BinanceSigningInput.oneofGroups_ = [[7,8,9,10,11]];

/**
 * @enum {number}
 */
proto.TW.proto.BinanceSigningInput.OrderOneofCase = {
  ORDER_ONEOF_NOT_SET: 0,
  TRADE_ORDER: 7,
  CANCEL_TRADE_ORDER: 8,
  SEND_ORDER: 9,
  FREEZE_ORDER: 10,
  UNFREEZE_ORDER: 11
};

/**
 * @return {proto.TW.proto.BinanceSigningInput.OrderOneofCase}
 */
proto.TW.proto.BinanceSigningInput.prototype.getOrderOneofCase = function() {
  return /** @type {proto.TW.proto.BinanceSigningInput.OrderOneofCase} */(jspb.Message.computeOneofCase(this, proto.TW.proto.BinanceSigningInput.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TW.proto.BinanceSigningInput.prototype.toObject = function(opt_includeInstance) {
  return proto.TW.proto.BinanceSigningInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TW.proto.BinanceSigningInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TW.proto.BinanceSigningInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    chainId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    accountNumber: jspb.Message.getFieldWithDefault(msg, 2, 0),
    sequence: jspb.Message.getFieldWithDefault(msg, 3, 0),
    source: jspb.Message.getFieldWithDefault(msg, 4, 0),
    memo: jspb.Message.getFieldWithDefault(msg, 5, ""),
    privateKey: msg.getPrivateKey_asB64(),
    tradeOrder: (f = msg.getTradeOrder()) && proto.TW.proto.BinanceTradeOrder.toObject(includeInstance, f),
    cancelTradeOrder: (f = msg.getCancelTradeOrder()) && proto.TW.proto.BinanceCancelTradeOrder.toObject(includeInstance, f),
    sendOrder: (f = msg.getSendOrder()) && proto.TW.proto.BinanceSendOrder.toObject(includeInstance, f),
    freezeOrder: (f = msg.getFreezeOrder()) && proto.TW.proto.BinanceTokenFreezeOrder.toObject(includeInstance, f),
    unfreezeOrder: (f = msg.getUnfreezeOrder()) && proto.TW.proto.BinanceTokenUnfreezeOrder.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TW.proto.BinanceSigningInput}
 */
proto.TW.proto.BinanceSigningInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TW.proto.BinanceSigningInput;
  return proto.TW.proto.BinanceSigningInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TW.proto.BinanceSigningInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TW.proto.BinanceSigningInput}
 */
proto.TW.proto.BinanceSigningInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAccountNumber(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSequence(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSource(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemo(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPrivateKey(value);
      break;
    case 7:
      var value = new proto.TW.proto.BinanceTradeOrder;
      reader.readMessage(value,proto.TW.proto.BinanceTradeOrder.deserializeBinaryFromReader);
      msg.setTradeOrder(value);
      break;
    case 8:
      var value = new proto.TW.proto.BinanceCancelTradeOrder;
      reader.readMessage(value,proto.TW.proto.BinanceCancelTradeOrder.deserializeBinaryFromReader);
      msg.setCancelTradeOrder(value);
      break;
    case 9:
      var value = new proto.TW.proto.BinanceSendOrder;
      reader.readMessage(value,proto.TW.proto.BinanceSendOrder.deserializeBinaryFromReader);
      msg.setSendOrder(value);
      break;
    case 10:
      var value = new proto.TW.proto.BinanceTokenFreezeOrder;
      reader.readMessage(value,proto.TW.proto.BinanceTokenFreezeOrder.deserializeBinaryFromReader);
      msg.setFreezeOrder(value);
      break;
    case 11:
      var value = new proto.TW.proto.BinanceTokenUnfreezeOrder;
      reader.readMessage(value,proto.TW.proto.BinanceTokenUnfreezeOrder.deserializeBinaryFromReader);
      msg.setUnfreezeOrder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TW.proto.BinanceSigningInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TW.proto.BinanceSigningInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TW.proto.BinanceSigningInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TW.proto.BinanceSigningInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChainId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAccountNumber();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getSequence();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getSource();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getMemo();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getPrivateKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getTradeOrder();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.TW.proto.BinanceTradeOrder.serializeBinaryToWriter
    );
  }
  f = message.getCancelTradeOrder();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.TW.proto.BinanceCancelTradeOrder.serializeBinaryToWriter
    );
  }
  f = message.getSendOrder();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.TW.proto.BinanceSendOrder.serializeBinaryToWriter
    );
  }
  f = message.getFreezeOrder();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.TW.proto.BinanceTokenFreezeOrder.serializeBinaryToWriter
    );
  }
  f = message.getUnfreezeOrder();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.TW.proto.BinanceTokenUnfreezeOrder.serializeBinaryToWriter
    );
  }
};


/**
 * optional string chain_id = 1;
 * @return {string}
 */
proto.TW.proto.BinanceSigningInput.prototype.getChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.TW.proto.BinanceSigningInput.prototype.setChainId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 account_number = 2;
 * @return {number}
 */
proto.TW.proto.BinanceSigningInput.prototype.getAccountNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.TW.proto.BinanceSigningInput.prototype.setAccountNumber = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 sequence = 3;
 * @return {number}
 */
proto.TW.proto.BinanceSigningInput.prototype.getSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.TW.proto.BinanceSigningInput.prototype.setSequence = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 source = 4;
 * @return {number}
 */
proto.TW.proto.BinanceSigningInput.prototype.getSource = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.TW.proto.BinanceSigningInput.prototype.setSource = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string memo = 5;
 * @return {string}
 */
proto.TW.proto.BinanceSigningInput.prototype.getMemo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.TW.proto.BinanceSigningInput.prototype.setMemo = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bytes private_key = 6;
 * @return {string}
 */
proto.TW.proto.BinanceSigningInput.prototype.getPrivateKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes private_key = 6;
 * This is a type-conversion wrapper around `getPrivateKey()`
 * @return {string}
 */
proto.TW.proto.BinanceSigningInput.prototype.getPrivateKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPrivateKey()));
};


/**
 * optional bytes private_key = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPrivateKey()`
 * @return {!Uint8Array}
 */
proto.TW.proto.BinanceSigningInput.prototype.getPrivateKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPrivateKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.TW.proto.BinanceSigningInput.prototype.setPrivateKey = function(value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional BinanceTradeOrder trade_order = 7;
 * @return {?proto.TW.proto.BinanceTradeOrder}
 */
proto.TW.proto.BinanceSigningInput.prototype.getTradeOrder = function() {
  return /** @type{?proto.TW.proto.BinanceTradeOrder} */ (
    jspb.Message.getWrapperField(this, proto.TW.proto.BinanceTradeOrder, 7));
};


/** @param {?proto.TW.proto.BinanceTradeOrder|undefined} value */
proto.TW.proto.BinanceSigningInput.prototype.setTradeOrder = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.TW.proto.BinanceSigningInput.oneofGroups_[0], value);
};


proto.TW.proto.BinanceSigningInput.prototype.clearTradeOrder = function() {
  this.setTradeOrder(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TW.proto.BinanceSigningInput.prototype.hasTradeOrder = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional BinanceCancelTradeOrder cancel_trade_order = 8;
 * @return {?proto.TW.proto.BinanceCancelTradeOrder}
 */
proto.TW.proto.BinanceSigningInput.prototype.getCancelTradeOrder = function() {
  return /** @type{?proto.TW.proto.BinanceCancelTradeOrder} */ (
    jspb.Message.getWrapperField(this, proto.TW.proto.BinanceCancelTradeOrder, 8));
};


/** @param {?proto.TW.proto.BinanceCancelTradeOrder|undefined} value */
proto.TW.proto.BinanceSigningInput.prototype.setCancelTradeOrder = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.TW.proto.BinanceSigningInput.oneofGroups_[0], value);
};


proto.TW.proto.BinanceSigningInput.prototype.clearCancelTradeOrder = function() {
  this.setCancelTradeOrder(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TW.proto.BinanceSigningInput.prototype.hasCancelTradeOrder = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional BinanceSendOrder send_order = 9;
 * @return {?proto.TW.proto.BinanceSendOrder}
 */
proto.TW.proto.BinanceSigningInput.prototype.getSendOrder = function() {
  return /** @type{?proto.TW.proto.BinanceSendOrder} */ (
    jspb.Message.getWrapperField(this, proto.TW.proto.BinanceSendOrder, 9));
};


/** @param {?proto.TW.proto.BinanceSendOrder|undefined} value */
proto.TW.proto.BinanceSigningInput.prototype.setSendOrder = function(value) {
  jspb.Message.setOneofWrapperField(this, 9, proto.TW.proto.BinanceSigningInput.oneofGroups_[0], value);
};


proto.TW.proto.BinanceSigningInput.prototype.clearSendOrder = function() {
  this.setSendOrder(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TW.proto.BinanceSigningInput.prototype.hasSendOrder = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional BinanceTokenFreezeOrder freeze_order = 10;
 * @return {?proto.TW.proto.BinanceTokenFreezeOrder}
 */
proto.TW.proto.BinanceSigningInput.prototype.getFreezeOrder = function() {
  return /** @type{?proto.TW.proto.BinanceTokenFreezeOrder} */ (
    jspb.Message.getWrapperField(this, proto.TW.proto.BinanceTokenFreezeOrder, 10));
};


/** @param {?proto.TW.proto.BinanceTokenFreezeOrder|undefined} value */
proto.TW.proto.BinanceSigningInput.prototype.setFreezeOrder = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.TW.proto.BinanceSigningInput.oneofGroups_[0], value);
};


proto.TW.proto.BinanceSigningInput.prototype.clearFreezeOrder = function() {
  this.setFreezeOrder(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TW.proto.BinanceSigningInput.prototype.hasFreezeOrder = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional BinanceTokenUnfreezeOrder unfreeze_order = 11;
 * @return {?proto.TW.proto.BinanceTokenUnfreezeOrder}
 */
proto.TW.proto.BinanceSigningInput.prototype.getUnfreezeOrder = function() {
  return /** @type{?proto.TW.proto.BinanceTokenUnfreezeOrder} */ (
    jspb.Message.getWrapperField(this, proto.TW.proto.BinanceTokenUnfreezeOrder, 11));
};


/** @param {?proto.TW.proto.BinanceTokenUnfreezeOrder|undefined} value */
proto.TW.proto.BinanceSigningInput.prototype.setUnfreezeOrder = function(value) {
  jspb.Message.setOneofWrapperField(this, 11, proto.TW.proto.BinanceSigningInput.oneofGroups_[0], value);
};


proto.TW.proto.BinanceSigningInput.prototype.clearUnfreezeOrder = function() {
  this.setUnfreezeOrder(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TW.proto.BinanceSigningInput.prototype.hasUnfreezeOrder = function() {
  return jspb.Message.getField(this, 11) != null;
};


