<%  method = locals[:method] -%>
<%= render('jni/method_prototype.erb', { method: method }) %> {
<%= render('jni/instance_access.erb', { entity: entity }) %>
<%= render('jni/parameter_access.erb', { parameters: method.parameters.drop(1) }) -%>
<%  if method.return_type.is_struct -%>
    struct TW<%= method.return_type.name %> result = <%= render('jni/method_call.erb', { method: method }) %>;
<%  elsif method.return_type.is_class -%>
    struct TW<%= method.return_type.name %> *result = <%= render('jni/method_call.erb', { method: method }) %>;
<%  else -%>
    TW<%= method.return_type.name %> *result = <%= render('jni/method_call.erb', { method: method }) %>;
<%  end -%>
<%= render('jni/parameter_release.erb', { parameters: method.parameters.drop(1) }) -%>
<%  if entity.is_struct -%>
    (*env)->ReleaseByteArrayElements(env, bytesArray, bytesBuffer, JNI_ABORT);

<%  end -%>
    jclass class = (*env)->FindClass(env, "com/wallet/crypto/trustapp/jni/<%= method.return_type.name %>");
<%  if method.return_type.is_struct -%>
    jbyteArray resultArray = (*env)->NewByteArray(env, sizeof(struct TW<%= method.return_type.name %>));
    (*env)->SetByteArrayRegion(env, resultArray, 0, sizeof(struct TW<%= method.return_type.name %>), (jbyte *) &result);
    jmethodID init = (*env)->GetMethodID(env, class, "createFromNative", "([b)V");
    return (*env)->NewObject(env, class, init, resultArray);
<%  else -%>
    jmethodID method = (*env)->GetStaticMethodID(env, class, "createFromNative", "(J)Lcom/wallet/crypto/trustapp/jni/<%= method.return_type.name %>;");
    return (*env)->CallStaticObjectMethod(env, class, method, (jlong) result);
<%  end -%>
}
