<% method = locals[:method] -%>
<% inout_data = method.parameters.last -%>
<%= render('jni/method_returning_data_prototype.erb', { method: method }) %> {
    jclass thisClass = (*env)->GetObjectClass(env, thisObject);
<%   if entity.is_struct -%>
    jfieldID bytesFieldID = (*env)->GetFieldID(env, thisClass, "bytes", "[b");
    jbyteArray bytesArray = (*env)->GetObjectField(env, thisObject, bytesFieldID);
    jbyte* bytesBuffer = (*env)->GetByteArrayElements(env, bytesArray, NULL);
    struct TW<%= entity.name %> *instance = (struct TW<%= entity.name %> *) bytesBuffer;
<%   else -%>
    jfieldID handleFieldID = (*env)->GetFieldID(env, thisClass, "handle", "J");
    struct TW<%= entity.name %> *instance = (struct TW<%= entity.name %> *) (*env)->GetLongField(env, thisObject, handleFieldID);
<%   end -%>

<%   method.parameters.each do |param| -%>
<%     next if param.name == inout_data.name -%>
<%     next unless param.type.name == :data || param.type.name == 'Data' -%>
<%=    render('jni/data_access.erb', { param: param }) -%>

<%   end -%>
    uint8_t <%= inout_data.name %>Buffer[<%= inout_data.type.size %>];
<%   if inout_data.type.name == :size -%>
    jsize <%= inout_data.name %>Size = (jsize) <%= render('jni/method_call.erb', { method: method }) -%>
<%   else -%>
    <%= render('jni/method_call.erb', { method: method }) -%>
<%   end -%>

<%   method.parameters.each do |param| -%>
<%     next if param.name == inout_data.name -%>
<%     next unless param.type.name == :data || param.type.name == 'Data' -%>
<%=    render('jni/data_release.erb', { param: param }) -%>

<%   end -%>
<%   if entity.is_struct -%>
    (*env)->ReleaseByteArrayElements(env, bytesArray, bytesBuffer, JNI_ABORT);

<%   end -%>
<%   if inout_data.type.name == :size -%>
    jbyteArray resultArray = (*env)->NewByteArray(env, <%= inout_data.name %>Size);
    (*env)->SetByteArrayRegion(env, resultArray, 0, <%= inout_data.name %>Size, (jbyte *) <%= inout_data.name %>Buffer);
<%   else -%>
    jbyteArray resultArray = (*env)->NewByteArray(env, <%= inout_data.type.size %>);
    (*env)->SetByteArrayRegion(env, resultArray, 0, <%= inout_data.type.size %>, (jbyte *) <%= inout_data.name %>Buffer);
<%   end -%>
    return resultArray;
}
