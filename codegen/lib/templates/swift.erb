// Copyright Â© 2017-2018 Trust.
//
// This file is part of Trust. The full Trust copyright notice, including
// terms governing use, modification, and redistribution, is contained in the
// file LICENSE at the root of the source code distribution tree.

import Foundation

public class <%= entity.name %> {
<%# Static properties -%>
<%- entity.static_properties.each do |property| -%>
    public static var <%= Swift.format_name(property.name) %>: <%= Swift.type(property.return_type) %> {
        <%- if property.return_type.is_class || property.return_type.is_struct -%>
        return <%= Swift.type(property.return_type) %>(rawValue: TW<%= entity.name %><%= property.name %>())
        <%- else -%>
        return TW<%= entity.name %><%= property.name %>()
        <%- end -%>
    }

<%- end -%>
<%# Static methods -%>
<%- entity.static_methods.each do |method| -%>
    <%- next if method.name.start_with?('Create') || method.name.start_with?('Init') %>
    <%- if should_return_data(method) -%>
<%= render('swift/static_method_returning_data.erb', { method: method }) %>
    <%- next end -%>
    public static func <%= Swift.format_name(method.name) %>(<%= Swift.parameters(method.parameters) %>) -> <%= Swift.type(method.return_type) %> {
    <%- inout_data = method.parameters.detect { |e| e.type.name == :data && e.type.is_inout } -%>
    <%- unless inout_data.nil? -%>
        <%= inout_data.name %>.withUnsafeMutableBytes { ptr in
            <%- if method.return_type.is_class || method.return_type.is_struct -%>
            return <%= Swift.type(method.return_type) %>(rawValue: TW<%= entity.name %><%= method.name %>(<%= Swift.arguments(method.parameters) %>))
            <%- else -%>
            return TW<%= entity.name %><%= method.name %>(<%= Swift.arguments(method.parameters) %>)
            <%- end -%>
        }
    <%- else -%>
        <%- if method.return_type.is_class || method.return_type.is_struct -%>
        return <%= Swift.type(method.return_type) %>(rawValue: TW<%= entity.name %><%= method.name %>(<%= Swift.arguments(method.parameters) %>))
        <%- else -%>
        return TW<%= entity.name %><%= method.name %>(<%= Swift.arguments(method.parameters) %>)
        <%- end -%>
    <%- end -%>
    }

<%- end -%>
<% if entity.is_struct -%>
<%=  render('swift/struct_properties.erb') -%>
<% else -%>
<%=  render('swift/class_properties.erb') -%>
<% end -%>
<%# Methods -%>
<% entity.methods.each do |method| -%>
<%   next if method.name == "Delete" %>
<%   if should_return_data(method) -%>
<%=    render('swift/method_returning_data.erb', { method: method }) %>
<%     next -%>
<%   elsif method.parameters.detect { |e| e.type.name == :data && e.type.is_inout } -%>
<%=    render('swift/method_with_inout_data.erb', { method: method }) %>
<%     next -%>
<%   end -%>
    public func <%= Swift.format_name(method.name) %>(<%= Swift.parameters(method.parameters.drop(1)) %>) -> <%= Swift.type(method.return_type) %> {
        <%- if method.return_type.is_class || method.return_type.is_struct -%>
        return <%= render('swift/entity_construct.erb', { method: method }) -%>
        <%- else -%>
        return <%= render('swift/method_Call.erb', { method: method }) -%>
        <%- end -%>
    }
<% end -%>
}
