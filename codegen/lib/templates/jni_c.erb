// Copyright Â© 2017-2018 Trust.
//
// This file is part of Trust. The full Trust copyright notice, including
// terms governing use, modification, and redistribution, is contained in the
// file LICENSE at the root of the source code distribution tree.

#include <jni.h>
#include <stdio.h>
#include <string.h>

#include <TrustWalletCore/TWData.h>
#include <TrustWalletCore/TW<%= entity.name %>.h>
#include "<%= entity.name %>.h"

<%# Constructors -%>
<% entity.static_methods.each do |method| -%>
<%   next unless method.name.start_with?('Create') -%>
jlong JNICALL <%= JNIHelper.function_name(entity: entity, function: method, native_prefix: true) %>(JNIEnv *env, jclass thisClass<%= JNIHelper.parameters(method.parameters) %>) {
<%   method.parameters.each do |param| -%>
<%     next unless param.type.name == :data || param.type.name == 'Data' -%>
<%=    render('jni/data_access.erb', { param: param }) -%>

<%   end -%>
    struct TW<%= entity.name %> *instance = TW<%= entity.name %><%= method.name %>(<%= JNIHelper.arguments(method.parameters) %>);

<%   method.parameters.each do |param| -%>
<%     next unless param.type.name == :data || param.type.name == 'Data' -%>
<%=    render('jni/data_release.erb', { param: param }) -%>
<%   end -%>
    return (jlong) instance;
}

<% end -%>
<%# Destructors -%>
<% entity.methods.each do |method| -%>
<%   next unless method.name.start_with?('Delete') -%>
void JNICALL <%= JNIHelper.function_name(entity: entity, function: method, native_prefix: true) %>(JNIEnv *env, jclass thisClass, jlong handle) {
    TW<%= entity.name %>Delete((struct TW<%= entity.name %> *) handle);
}

<% end -%>
<%# Initializers -%>
<% entity.static_methods.each do |method| -%>
<%   next unless method.name.start_with?('Init') -%>
<%=   JNIHelper.type(method.return_type) %> JNICALL <%= JNIHelper.function_name(entity: entity, function: method) %>(JNIEnv *env, jclass thisObject<%= JNIHelper.parameters(method.parameters.drop(1)) %>) {
    jclass thisClass = (*env)->GetObjectClass(env, thisObject);
    jfieldID bytesFieldID = (*env)->GetFieldID(env, thisClass, "bytes", "[b");
    jbyteArray bytesArray = (*env)->GetObjectField(env, thisObject, bytesFieldID);
    jbyte* bytesBuffer = (*env)->GetByteArrayElements(env, bytesArray, NULL);
    struct TW<%= entity.name %> *instance = (struct TW<%= entity.name %> *) bytesBuffer;

<%   method.parameters.each do |param| -%>
<%     next unless param.type.name == :data || param.type.name == 'Data' -%>
<%=    render('jni/data_access.erb', { param: param }) -%>

<%   end -%>
    <%= JNIHelper.type(method.return_type) %> result = (<%= JNIHelper.type(method.return_type) %>) TW<%= entity.name %><%= method.name %>(instance, <%= JNIHelper.arguments(method.parameters.drop(1)) %>);

<%   method.parameters.each do |param| -%>
<%     next unless param.type.name == :data || param.type.name == 'Data' -%>
<%=    render('jni/data_release.erb', { param: param }) -%>
<%   end -%>
    (*env)->ReleaseByteArrayElements(env, bytesArray, (jbyte *) bytesBuffer, JNI_ABORT);

    return result;
}

<% end -%>
<%# Static properties -%>
<% entity.static_properties.each do |method| -%>
<%   if should_return_data(method) -%>
<%=    render('jni/static_method_returning_data.erb', { method: method }) %>
<%   elsif should_return_string(method) -%>
<%=    render('jni/static_method_returning_string.erb', { method: method }) %>
<%   elsif should_return_object(method) -%>
<%=    render('jni/static_method_returning_object.erb', { method: method }) %>
<%   else -%>
<%=    render('jni/static_method.erb', { method: method }) %>
<%   end -%>
<% end -%>
<%# Static methods -%>
<% entity.static_methods.each do |method| -%>
<%   next if method.name.start_with?('Create') || method.name.start_with?('Init') -%>
<%   if should_return_data(method) -%>
<%=    render('jni/static_method_returning_data.erb', { method: method }) %>
<%   elsif should_return_string(method) -%>
<%=    render('jni/static_method_returning_string.erb', { method: method }) %>
<%   elsif should_return_object(method) -%>
<%=    render('jni/static_method_returning_object.erb', { method: method }) %>
<%   else -%>
<%=    render('jni/static_method.erb', { method: method }) %>
<%   end -%>
<% end -%>

<%# Properties -%>
<% entity.properties.each do |method| -%>
<%   if should_return_data(method) -%>
<%=    render('jni/method_returning_data.erb', { method: method }) %>
<%   elsif should_return_string(method) -%>
<%=    render('jni/method_returning_string.erb', { method: method }) %>
<%   elsif should_return_object(method) -%>
<%=    render('jni/method_returning_object.erb', { method: method }) %>
<%   else -%>
<%=    render('jni/method.erb', { method: method }) %>
<%   end -%>
<% end -%>
<%# Methods -%>
<% entity.methods.each do |method| -%>
<%   next if method.name == "Delete" -%>
<%   if should_return_data(method) -%>
<%=    render('jni/method_returning_data.erb', { method: method }) %>
<%   elsif should_return_string(method) -%>
<%=    render('jni/method_returning_string.erb', { method: method }) %>
<%   elsif should_return_object(method) -%>
<%=    render('jni/method_returning_object.erb', { method: method }) %>
<%   else -%>
<%=    render('jni/method.erb', { method: method }) %>
<%   end -%>
<% end -%>
