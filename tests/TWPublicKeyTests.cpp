#include "gtest/gtest.h"
#include <TrustWalletCore/TWHash.h>
#include <TrustWalletCore/TWPrivateKey.h>
#include <TrustWalletCore/TWPublicKey.h>

TEST(PublicKeyTests, Compressed) {
    uint8_t bytes[] = {0xaf, 0xee, 0xfc, 0xa7, 0x4d, 0x9a, 0x32, 0x5c, 0xf1, 0xd6, 0xb6, 0x91, 0x1d, 0x61, 0xa6, 0x5c, 0x32, 0xaf, 0xa8, 0xe0, 0x2b, 0xd5, 0xe7, 0x8e, 0x2e, 0x4a, 0xc2, 0x91, 0x0b, 0xab, 0x45, 0xf5};
    auto privateKey = TWPrivateKeyCreateWithData({bytes, 32});
    auto publicKey = TWPrivateKeyGetPublicKey(privateKey, false);

    uint8_t expected[] = {0x03, 0x99, 0xc6, 0xf5, 0x1a, 0xd6, 0xf9, 0x8c, 0x9c, 0x58, 0x3f, 0x8e, 0x92, 0xbb, 0x77, 0x58, 0xab, 0x2c, 0xa9, 0xa0, 0x41, 0x10, 0xc0, 0xa1, 0x12, 0x6e, 0xc4, 0x3e, 0x54, 0x53, 0xd1, 0x96, 0xc1};
    auto compressed = TWPublicKeyCompressed(publicKey);

    for (auto i = 0; i < TWPublicKeyCompressedSize; i += 1) {
        ASSERT_EQ(expected[i], compressed.bytes[i]);
    }
}

TEST(PublicKeyTests, Verify) {
    uint8_t bytes[] = {0xaf, 0xee, 0xfc, 0xa7, 0x4d, 0x9a, 0x32, 0x5c, 0xf1, 0xd6, 0xb6, 0x91, 0x1d, 0x61, 0xa6, 0x5c, 0x32, 0xaf, 0xa8, 0xe0, 0x2b, 0xd5, 0xe7, 0x8e, 0x2e, 0x4a, 0xc2, 0x91, 0x0b, 0xab, 0x45, 0xf5};
    auto privateKey = TWPrivateKeyCreateWithData({bytes, 32});

    const char *message = "Hello";
    uint8_t digest[TWHashSHA256Length];
    TWHashKeccak256({ .bytes = (const uint8_t *) message, .len = 5 }, digest);

    uint8_t signature[65];
    TWPrivateKeySign(privateKey, { .bytes = digest, .len = TWHashSHA256Length }, signature);

    auto publicKey = TWPrivateKeyGetPublicKey(privateKey, false);
    ASSERT_TRUE(TWPublicKeyVerify(publicKey, { .bytes = signature, .len = TWHashSHA256Length }, { .bytes = digest, .len = TWHashSHA256Length }));
}
