<%  method = locals[:method] -%>
<%  inout_data = method.parameters.last -%>
<%= render('jni/method_returning_string_prototype.erb', { method: method }) %> {
    jclass thisClass = (*env)->GetObjectClass(env, thisObject);
<%  if entity.is_struct -%>
    jfieldID bytesFieldID = (*env)->GetFieldID(env, thisClass, "bytes", "[b");
    jbyteArray bytesArray = (*env)->GetObjectField(env, thisObject, bytesFieldID);
    jbyte* bytesBuffer = (*env)->GetByteArrayElements(env, bytesArray, NULL);
    struct TW<%= entity.name %> *instance = (struct TW<%= entity.name %> *) bytesBuffer;
<%  else -%>
    jfieldID handleFieldID = (*env)->GetFieldID(env, thisClass, "nativeHandle", "J");
    struct TW<%= entity.name %> *instance = (struct TW<%= entity.name %> *) (*env)->GetLongField(env, thisObject, handleFieldID);
<%  end -%>
<%= render('jni/parameter_access.erb', { parameters: method.parameters.drop(1) }) -%>
    jstring result = TWStringJString(<%= render('jni/method_call.erb', { method: method }) %>, env);
<%= render('jni/parameter_release.erb', { parameters: method.parameters.drop(1) }) -%>
<%  if entity.is_struct -%>
    (*env)->ReleaseByteArrayElements(env, bytesArray, bytesBuffer, JNI_ABORT);

<%  end -%>
    return result;
}
