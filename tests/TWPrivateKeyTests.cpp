#include "gtest/gtest.h"

#include <TrustWalletCore/TWHash.h>
#include <TrustWalletCore/TWPrivateKey.h>
#include <TrustWalletCore/TWPublicKey.h>

TEST(PrivateKeyTests, CreateInvalid) {
    uint8_t bytes[] = {0xde, 0xad, 0xbe, 0xef};
    auto privateKey = TWPrivateKeyCreateWithData({ .bytes = bytes, .len = 4 });

    ASSERT_EQ(privateKey, nullptr);
}

TEST(PrivateKeyTests, IsValid) {
    uint8_t bytes[] = {0xaf, 0xee, 0xfc, 0xa7, 0x4d, 0x9a, 0x32, 0x5c, 0xf1, 0xd6, 0xb6, 0x91, 0x1d, 0x61, 0xa6, 0x5c, 0x32, 0xaf, 0xa8, 0xe0, 0x2b, 0xd5, 0xe7, 0x8e, 0x2e, 0x4a, 0xc2, 0x91, 0x0b, 0xab, 0x45, 0xf5};
    TWData data{ .bytes = bytes, .len = 32 };

    ASSERT_TRUE(TWPrivateKeyIsValid(data));
}

TEST(PrivateKeyTests, PublicKey) {
    uint8_t bytes[] = {0xaf, 0xee, 0xfc, 0xa7, 0x4d, 0x9a, 0x32, 0x5c, 0xf1, 0xd6, 0xb6, 0x91, 0x1d, 0x61, 0xa6, 0x5c, 0x32, 0xaf, 0xa8, 0xe0, 0x2b, 0xd5, 0xe7, 0x8e, 0x2e, 0x4a, 0xc2, 0x91, 0x0b, 0xab, 0x45, 0xf5};
    auto privateKey = TWPrivateKeyCreateWithData({ .bytes = bytes, .len = 32 });
    auto publicKey = TWPrivateKeyGetPublicKey(privateKey, false);

    uint8_t expected[] = {0x04, 0x99, 0xc6, 0xf5, 0x1a, 0xd6, 0xf9, 0x8c, 0x9c, 0x58, 0x3f, 0x8e, 0x92, 0xbb, 0x77, 0x58, 0xab, 0x2c, 0xa9, 0xa0, 0x41, 0x10, 0xc0, 0xa1, 0x12, 0x6e, 0xc4, 0x3e, 0x54, 0x53, 0xd1, 0x96, 0xc1, 0x66, 0xb4, 0x89, 0xa4, 0xb7, 0xc4, 0x91, 0xe7, 0x68, 0x8e, 0x6e, 0xbe, 0xa3, 0xa7, 0x1f, 0xc3, 0xa1, 0xa4, 0x8d, 0x60, 0xf9, 0x8d, 0x5c, 0xe8, 0x4c, 0x93, 0xb6, 0x5e, 0x42, 0x3f, 0xde, 0x91};
    for (auto i = 0; i < sizeof(expected); i += 1) {
        ASSERT_EQ(publicKey.bytes[i], expected[i]);
    }
}

TEST(PrivateKeyTests, ClearMemory) {
    uint8_t bytes[] = {0xaf, 0xee, 0xfc, 0xa7, 0x4d, 0x9a, 0x32, 0x5c, 0xf1, 0xd6, 0xb6, 0x91, 0x1d, 0x61, 0xa6, 0x5c, 0x32, 0xaf, 0xa8, 0xe0, 0x2b, 0xd5, 0xe7, 0x8e, 0x2e, 0x4a, 0xc2, 0x91, 0x0b, 0xab, 0x45, 0xf5};
    auto privateKey = TWPrivateKeyCreateWithData({ .bytes = bytes, .len = 32 });
    TWPrivateKeyDelete(privateKey);

    uint8_t *ptr = reinterpret_cast<uint8_t *>(privateKey);
    for (auto i = 0; i < TWPrivateKeySize; i += 1) {
        ASSERT_EQ(ptr[i], 0);
    }
}

TEST(PrivateKeyTests, Sign) {
    uint8_t bytes[] = {0xaf, 0xee, 0xfc, 0xa7, 0x4d, 0x9a, 0x32, 0x5c, 0xf1, 0xd6, 0xb6, 0x91, 0x1d, 0x61, 0xa6, 0x5c, 0x32, 0xaf, 0xa8, 0xe0, 0x2b, 0xd5, 0xe7, 0x8e, 0x2e, 0x4a, 0xc2, 0x91, 0x0b, 0xab, 0x45, 0xf5};
    auto privateKey = TWPrivateKeyCreateWithData({ .bytes = bytes, .len = 32 });

    auto message = "hello";
    auto data = TWData{ .bytes = (uint8_t *) message, .len = strlen(message) };
    uint8_t hash[32];
    TWHashKeccak256(data, hash);

    uint8_t actual[65];
    auto result = TWPrivateKeySign(privateKey, TWData{ .bytes = hash, .len = 32 }, actual);

    uint8_t expected[] = {0x87, 0x20, 0xa4, 0x6b, 0x5b, 0x39, 0x63, 0x79, 0x0d, 0x94, 0xbc, 0xc6, 0x1a, 0xd5, 0x7c, 0xa0, 0x2f, 0xd1, 0x53, 0x58, 0x43, 0x15, 0xbf, 0xa1, 0x61, 0xed, 0x34, 0x55, 0xe3, 0x36, 0xba, 0x62, 0x4d, 0x68, 0xdf, 0x01, 0x0e, 0xd9, 0x34, 0xb8, 0x79, 0x2c, 0x5b, 0x6a, 0x57, 0xba, 0x86, 0xc3, 0xda, 0x31, 0xd0, 0x39, 0xf9, 0x61, 0x2b, 0x44, 0xd1, 0xbf, 0x05, 0x41, 0x32, 0x25, 0x4d, 0xe9, 0x01};
    for (auto i = 0; i < sizeof(expected); i += 1) {
        ASSERT_EQ(actual[i], expected[i]);
    }
}
