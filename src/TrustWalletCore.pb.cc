// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TrustWalletCore.proto

#include "TrustWalletCore.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_TrustWalletCore_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_TrustWalletCore_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BitcoinOutPoint;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_TrustWalletCore_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BitcoinSigningInput_ScriptsEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_TrustWalletCore_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_BitcoinUnspentTransaction;
}  // namespace protobuf_TrustWalletCore_2eproto
namespace TW {
namespace proto {
class BitcoinOutPointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BitcoinOutPoint>
      _instance;
} _BitcoinOutPoint_default_instance_;
class BitcoinUnspentTransactionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BitcoinUnspentTransaction>
      _instance;
} _BitcoinUnspentTransaction_default_instance_;
class BitcoinSigningInput_ScriptsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BitcoinSigningInput_ScriptsEntry_DoNotUse>
      _instance;
} _BitcoinSigningInput_ScriptsEntry_DoNotUse_default_instance_;
class BitcoinSigningInputDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BitcoinSigningInput>
      _instance;
} _BitcoinSigningInput_default_instance_;
}  // namespace proto
}  // namespace TW
namespace protobuf_TrustWalletCore_2eproto {
static void InitDefaultsBitcoinOutPoint() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::proto::_BitcoinOutPoint_default_instance_;
    new (ptr) ::TW::proto::BitcoinOutPoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TW::proto::BitcoinOutPoint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BitcoinOutPoint =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBitcoinOutPoint}, {}};

static void InitDefaultsBitcoinUnspentTransaction() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::proto::_BitcoinUnspentTransaction_default_instance_;
    new (ptr) ::TW::proto::BitcoinUnspentTransaction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TW::proto::BitcoinUnspentTransaction::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_BitcoinUnspentTransaction =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBitcoinUnspentTransaction}, {
      &protobuf_TrustWalletCore_2eproto::scc_info_BitcoinOutPoint.base,}};

static void InitDefaultsBitcoinSigningInput_ScriptsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::proto::_BitcoinSigningInput_ScriptsEntry_DoNotUse_default_instance_;
    new (ptr) ::TW::proto::BitcoinSigningInput_ScriptsEntry_DoNotUse();
  }
  ::TW::proto::BitcoinSigningInput_ScriptsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BitcoinSigningInput_ScriptsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBitcoinSigningInput_ScriptsEntry_DoNotUse}, {}};

static void InitDefaultsBitcoinSigningInput() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TW::proto::_BitcoinSigningInput_default_instance_;
    new (ptr) ::TW::proto::BitcoinSigningInput();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TW::proto::BitcoinSigningInput::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_BitcoinSigningInput =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsBitcoinSigningInput}, {
      &protobuf_TrustWalletCore_2eproto::scc_info_BitcoinSigningInput_ScriptsEntry_DoNotUse.base,
      &protobuf_TrustWalletCore_2eproto::scc_info_BitcoinUnspentTransaction.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_BitcoinOutPoint.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BitcoinUnspentTransaction.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BitcoinSigningInput_ScriptsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BitcoinSigningInput.base);
}

}  // namespace protobuf_TrustWalletCore_2eproto
namespace TW {
namespace proto {

// ===================================================================

void BitcoinOutPoint::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BitcoinOutPoint::kHashFieldNumber;
const int BitcoinOutPoint::kIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BitcoinOutPoint::BitcoinOutPoint()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_TrustWalletCore_2eproto::scc_info_BitcoinOutPoint.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:TW.proto.BitcoinOutPoint)
}
BitcoinOutPoint::BitcoinOutPoint(const BitcoinOutPoint& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hash().size() > 0) {
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:TW.proto.BitcoinOutPoint)
}

void BitcoinOutPoint::SharedCtor() {
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_ = 0u;
}

BitcoinOutPoint::~BitcoinOutPoint() {
  // @@protoc_insertion_point(destructor:TW.proto.BitcoinOutPoint)
  SharedDtor();
}

void BitcoinOutPoint::SharedDtor() {
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BitcoinOutPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BitcoinOutPoint& BitcoinOutPoint::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_TrustWalletCore_2eproto::scc_info_BitcoinOutPoint.base);
  return *internal_default_instance();
}


void BitcoinOutPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.proto.BitcoinOutPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_ = 0u;
  _internal_metadata_.Clear();
}

bool BitcoinOutPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:TW.proto.BitcoinOutPoint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TW.proto.BitcoinOutPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TW.proto.BitcoinOutPoint)
  return false;
#undef DO_
}

void BitcoinOutPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TW.proto.BitcoinOutPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->hash(), output);
  }

  // uint32 index = 2;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:TW.proto.BitcoinOutPoint)
}

size_t BitcoinOutPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.proto.BitcoinOutPoint)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hash());
  }

  // uint32 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BitcoinOutPoint::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BitcoinOutPoint*>(&from));
}

void BitcoinOutPoint::MergeFrom(const BitcoinOutPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.proto.BitcoinOutPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
}

void BitcoinOutPoint::CopyFrom(const BitcoinOutPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.proto.BitcoinOutPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BitcoinOutPoint::IsInitialized() const {
  return true;
}

void BitcoinOutPoint::Swap(BitcoinOutPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BitcoinOutPoint::InternalSwap(BitcoinOutPoint* other) {
  using std::swap;
  hash_.Swap(&other->hash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(index_, other->index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string BitcoinOutPoint::GetTypeName() const {
  return "TW.proto.BitcoinOutPoint";
}


// ===================================================================

void BitcoinUnspentTransaction::InitAsDefaultInstance() {
  ::TW::proto::_BitcoinUnspentTransaction_default_instance_._instance.get_mutable()->out_point_ = const_cast< ::TW::proto::BitcoinOutPoint*>(
      ::TW::proto::BitcoinOutPoint::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BitcoinUnspentTransaction::kOutPointFieldNumber;
const int BitcoinUnspentTransaction::kScriptFieldNumber;
const int BitcoinUnspentTransaction::kAmountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BitcoinUnspentTransaction::BitcoinUnspentTransaction()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_TrustWalletCore_2eproto::scc_info_BitcoinUnspentTransaction.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:TW.proto.BitcoinUnspentTransaction)
}
BitcoinUnspentTransaction::BitcoinUnspentTransaction(const BitcoinUnspentTransaction& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  script_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.script().size() > 0) {
    script_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.script_);
  }
  if (from.has_out_point()) {
    out_point_ = new ::TW::proto::BitcoinOutPoint(*from.out_point_);
  } else {
    out_point_ = NULL;
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:TW.proto.BitcoinUnspentTransaction)
}

void BitcoinUnspentTransaction::SharedCtor() {
  script_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&out_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&amount_) -
      reinterpret_cast<char*>(&out_point_)) + sizeof(amount_));
}

BitcoinUnspentTransaction::~BitcoinUnspentTransaction() {
  // @@protoc_insertion_point(destructor:TW.proto.BitcoinUnspentTransaction)
  SharedDtor();
}

void BitcoinUnspentTransaction::SharedDtor() {
  script_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete out_point_;
}

void BitcoinUnspentTransaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BitcoinUnspentTransaction& BitcoinUnspentTransaction::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_TrustWalletCore_2eproto::scc_info_BitcoinUnspentTransaction.base);
  return *internal_default_instance();
}


void BitcoinUnspentTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.proto.BitcoinUnspentTransaction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  script_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && out_point_ != NULL) {
    delete out_point_;
  }
  out_point_ = NULL;
  amount_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool BitcoinUnspentTransaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:TW.proto.BitcoinUnspentTransaction)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .TW.proto.BitcoinOutPoint out_point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_out_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes script = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_script()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 amount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TW.proto.BitcoinUnspentTransaction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TW.proto.BitcoinUnspentTransaction)
  return false;
#undef DO_
}

void BitcoinUnspentTransaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TW.proto.BitcoinUnspentTransaction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TW.proto.BitcoinOutPoint out_point = 1;
  if (this->has_out_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_out_point(), output);
  }

  // bytes script = 2;
  if (this->script().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->script(), output);
  }

  // int64 amount = 3;
  if (this->amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->amount(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:TW.proto.BitcoinUnspentTransaction)
}

size_t BitcoinUnspentTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.proto.BitcoinUnspentTransaction)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // bytes script = 2;
  if (this->script().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->script());
  }

  // .TW.proto.BitcoinOutPoint out_point = 1;
  if (this->has_out_point()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *out_point_);
  }

  // int64 amount = 3;
  if (this->amount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->amount());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BitcoinUnspentTransaction::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BitcoinUnspentTransaction*>(&from));
}

void BitcoinUnspentTransaction::MergeFrom(const BitcoinUnspentTransaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.proto.BitcoinUnspentTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.script().size() > 0) {

    script_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.script_);
  }
  if (from.has_out_point()) {
    mutable_out_point()->::TW::proto::BitcoinOutPoint::MergeFrom(from.out_point());
  }
  if (from.amount() != 0) {
    set_amount(from.amount());
  }
}

void BitcoinUnspentTransaction::CopyFrom(const BitcoinUnspentTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.proto.BitcoinUnspentTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BitcoinUnspentTransaction::IsInitialized() const {
  return true;
}

void BitcoinUnspentTransaction::Swap(BitcoinUnspentTransaction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BitcoinUnspentTransaction::InternalSwap(BitcoinUnspentTransaction* other) {
  using std::swap;
  script_.Swap(&other->script_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(out_point_, other->out_point_);
  swap(amount_, other->amount_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string BitcoinUnspentTransaction::GetTypeName() const {
  return "TW.proto.BitcoinUnspentTransaction";
}


// ===================================================================

BitcoinSigningInput_ScriptsEntry_DoNotUse::BitcoinSigningInput_ScriptsEntry_DoNotUse() {}
BitcoinSigningInput_ScriptsEntry_DoNotUse::BitcoinSigningInput_ScriptsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void BitcoinSigningInput_ScriptsEntry_DoNotUse::MergeFrom(const BitcoinSigningInput_ScriptsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

void BitcoinSigningInput::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BitcoinSigningInput::kHashTypeFieldNumber;
const int BitcoinSigningInput::kAmountFieldNumber;
const int BitcoinSigningInput::kToAddressFieldNumber;
const int BitcoinSigningInput::kChangeAddressFieldNumber;
const int BitcoinSigningInput::kPrivateKeyFieldNumber;
const int BitcoinSigningInput::kScriptsFieldNumber;
const int BitcoinSigningInput::kUtxoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BitcoinSigningInput::BitcoinSigningInput()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_TrustWalletCore_2eproto::scc_info_BitcoinSigningInput.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:TW.proto.BitcoinSigningInput)
}
BitcoinSigningInput::BitcoinSigningInput(const BitcoinSigningInput& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      private_key_(from.private_key_),
      utxo_(from.utxo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  scripts_.MergeFrom(from.scripts_);
  to_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.to_address().size() > 0) {
    to_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_address_);
  }
  change_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.change_address().size() > 0) {
    change_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.change_address_);
  }
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&hash_type_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(hash_type_));
  // @@protoc_insertion_point(copy_constructor:TW.proto.BitcoinSigningInput)
}

void BitcoinSigningInput::SharedCtor() {
  to_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  change_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hash_type_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(hash_type_));
}

BitcoinSigningInput::~BitcoinSigningInput() {
  // @@protoc_insertion_point(destructor:TW.proto.BitcoinSigningInput)
  SharedDtor();
}

void BitcoinSigningInput::SharedDtor() {
  to_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  change_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BitcoinSigningInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BitcoinSigningInput& BitcoinSigningInput::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_TrustWalletCore_2eproto::scc_info_BitcoinSigningInput.base);
  return *internal_default_instance();
}


void BitcoinSigningInput::Clear() {
// @@protoc_insertion_point(message_clear_start:TW.proto.BitcoinSigningInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  private_key_.Clear();
  scripts_.Clear();
  utxo_.Clear();
  to_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  change_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hash_type_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(hash_type_));
  _internal_metadata_.Clear();
}

bool BitcoinSigningInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:TW.proto.BitcoinSigningInput)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 hash_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hash_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 amount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string to_address = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->to_address().data(), static_cast<int>(this->to_address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TW.proto.BitcoinSigningInput.to_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string change_address = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_change_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->change_address().data(), static_cast<int>(this->change_address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TW.proto.BitcoinSigningInput.change_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes private_key = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_private_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, bytes> scripts = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          BitcoinSigningInput_ScriptsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapFieldLite<
              BitcoinSigningInput_ScriptsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&scripts_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TW.proto.BitcoinSigningInput.ScriptsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TW.proto.BitcoinUnspentTransaction utxo = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_utxo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TW.proto.BitcoinSigningInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TW.proto.BitcoinSigningInput)
  return false;
#undef DO_
}

void BitcoinSigningInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TW.proto.BitcoinSigningInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 hash_type = 1;
  if (this->hash_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hash_type(), output);
  }

  // int64 amount = 2;
  if (this->amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->amount(), output);
  }

  // string to_address = 3;
  if (this->to_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to_address().data(), static_cast<int>(this->to_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TW.proto.BitcoinSigningInput.to_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->to_address(), output);
  }

  // string change_address = 4;
  if (this->change_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->change_address().data(), static_cast<int>(this->change_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TW.proto.BitcoinSigningInput.change_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->change_address(), output);
  }

  // repeated bytes private_key = 10;
  for (int i = 0, n = this->private_key_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->private_key(i), output);
  }

  // map<string, bytes> scripts = 11;
  if (!this->scripts().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "TW.proto.BitcoinSigningInput.ScriptsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->scripts().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->scripts().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->scripts().begin();
          it != this->scripts().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<BitcoinSigningInput_ScriptsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(scripts_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            11, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<BitcoinSigningInput_ScriptsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->scripts().begin();
          it != this->scripts().end(); ++it) {
        entry.reset(scripts_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            11, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated .TW.proto.BitcoinUnspentTransaction utxo = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->utxo_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12,
      this->utxo(static_cast<int>(i)),
      output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:TW.proto.BitcoinSigningInput)
}

size_t BitcoinSigningInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TW.proto.BitcoinSigningInput)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated bytes private_key = 10;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->private_key_size());
  for (int i = 0, n = this->private_key_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->private_key(i));
  }

  // map<string, bytes> scripts = 11;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->scripts_size());
  {
    ::std::unique_ptr<BitcoinSigningInput_ScriptsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->scripts().begin();
        it != this->scripts().end(); ++it) {
      entry.reset(scripts_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated .TW.proto.BitcoinUnspentTransaction utxo = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->utxo_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->utxo(static_cast<int>(i)));
    }
  }

  // string to_address = 3;
  if (this->to_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->to_address());
  }

  // string change_address = 4;
  if (this->change_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->change_address());
  }

  // int64 amount = 2;
  if (this->amount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->amount());
  }

  // uint32 hash_type = 1;
  if (this->hash_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hash_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BitcoinSigningInput::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BitcoinSigningInput*>(&from));
}

void BitcoinSigningInput::MergeFrom(const BitcoinSigningInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TW.proto.BitcoinSigningInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  private_key_.MergeFrom(from.private_key_);
  scripts_.MergeFrom(from.scripts_);
  utxo_.MergeFrom(from.utxo_);
  if (from.to_address().size() > 0) {

    to_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_address_);
  }
  if (from.change_address().size() > 0) {

    change_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.change_address_);
  }
  if (from.amount() != 0) {
    set_amount(from.amount());
  }
  if (from.hash_type() != 0) {
    set_hash_type(from.hash_type());
  }
}

void BitcoinSigningInput::CopyFrom(const BitcoinSigningInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TW.proto.BitcoinSigningInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BitcoinSigningInput::IsInitialized() const {
  return true;
}

void BitcoinSigningInput::Swap(BitcoinSigningInput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BitcoinSigningInput::InternalSwap(BitcoinSigningInput* other) {
  using std::swap;
  private_key_.InternalSwap(CastToBase(&other->private_key_));
  scripts_.Swap(&other->scripts_);
  CastToBase(&utxo_)->InternalSwap(CastToBase(&other->utxo_));
  to_address_.Swap(&other->to_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  change_address_.Swap(&other->change_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(amount_, other->amount_);
  swap(hash_type_, other->hash_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string BitcoinSigningInput::GetTypeName() const {
  return "TW.proto.BitcoinSigningInput";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace TW
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::TW::proto::BitcoinOutPoint* Arena::CreateMaybeMessage< ::TW::proto::BitcoinOutPoint >(Arena* arena) {
  return Arena::CreateInternal< ::TW::proto::BitcoinOutPoint >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::TW::proto::BitcoinUnspentTransaction* Arena::CreateMaybeMessage< ::TW::proto::BitcoinUnspentTransaction >(Arena* arena) {
  return Arena::CreateInternal< ::TW::proto::BitcoinUnspentTransaction >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::TW::proto::BitcoinSigningInput_ScriptsEntry_DoNotUse* Arena::CreateMaybeMessage< ::TW::proto::BitcoinSigningInput_ScriptsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::TW::proto::BitcoinSigningInput_ScriptsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::TW::proto::BitcoinSigningInput* Arena::CreateMaybeMessage< ::TW::proto::BitcoinSigningInput >(Arena* arena) {
  return Arena::CreateInternal< ::TW::proto::BitcoinSigningInput >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
