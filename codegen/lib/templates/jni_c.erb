// Copyright Â© 2017-2019 Trust.
//
// This file is part of Trust. The full Trust copyright notice, including
// terms governing use, modification, and redistribution, is contained in the
// file LICENSE at the root of the source code distribution tree.

#include <jni.h>
#include <stdio.h>
#include <string.h>

<% require 'set' -%>
<%  includes = SortedSet.new([entity.name]) -%>
<%  entity.static_methods.each do |method| -%>
<%    includes << method.return_type.name if method.return_type.is_struct || method.return_type.is_class -%>
<%    method.parameters.each do |param| -%>
<%      includes << param.type.name if param.type.is_struct || param.type.is_class -%>
<%    end -%>
<%  end -%>
<%  includes.each do |include| -%>
#include <TrustWalletCore/TW<%= include %>.h>
<%  end -%>

#include "TWJNI.h"
#include "<%= entity.name %>.h"

<%# Constructors -%>
<%  entity.static_methods.each do |method| -%>
<%    next unless method.name.start_with?('Create') -%>
jlong JNICALL <%= JNIHelper.function_name(entity: entity, function: method, native_prefix: true) %>(JNIEnv *env, jclass thisClass<%= JNIHelper.parameters(method.parameters) %>) {
<%=   render('jni/parameter_access.erb', { parameters: method.parameters }) -%>
    struct TW<%= entity.name %> *instance = TW<%= entity.name %><%= method.name %>(<%= JNIHelper.arguments(method.parameters) %>);
<%=   render('jni/parameter_release.erb', { parameters: method.parameters }) -%>
    return (jlong) instance;
}

<%  end -%>
<%# Destructors -%>
<%  entity.methods.each do |method| -%>
<%    next unless method.name.start_with?('Delete') -%>
void JNICALL <%= JNIHelper.function_name(entity: entity, function: method, native_prefix: true) %>(JNIEnv *env, jclass thisClass, jlong handle) {
    TW<%= entity.name %>Delete((struct TW<%= entity.name %> *) handle);
}

<%  end -%>
<%# Initializers -%>
<%  entity.static_methods.each do |method| -%>
<%    next unless method.name.start_with?('Init') -%>
jbyteArray JNICALL <%= JNIHelper.function_name(entity: entity, function: method) %>(JNIEnv *env, jclass thisClass<%= JNIHelper.parameters(method.parameters.drop(1)) %>) {
    jbyteArray array = (*env)->NewByteArray(env, sizeof(struct TW<%= entity.name %>));
    jbyte* bytesBuffer = (*env)->GetByteArrayElements(env, array, NULL);
    struct TW<%= entity.name %> *instance = (struct TW<%= entity.name %> *) bytesBuffer;
<%=   render('jni/parameter_access.erb', { parameters: method.parameters.drop(1) }) -%>
    <%= JNIHelper.type(method.return_type) %> result = (<%= JNIHelper.type(method.return_type) %>) TW<%= entity.name %><%= method.name %>(instance, <%= JNIHelper.arguments(method.parameters.drop(1)) %>);
<%=   render('jni/parameter_release.erb', { parameters: method.parameters.drop(1) }) -%>
    (*env)->ReleaseByteArrayElements(env, array, bytesBuffer, 0);

    if (result) {
        return array;
    } else {
        return NULL;
    }
}

<%  end -%>
<%# Static properties -%>
<%  entity.static_properties.each do |method| -%>
<%    if should_return_data(method) -%>
<%=     render('jni/static_method_returning_data.erb', { method: method }) %>
<%    elsif should_return_string(method) -%>
<%=     render('jni/static_method_returning_string.erb', { method: method }) %>
<%    elsif should_return_object(method) -%>
<%=     render('jni/static_method_returning_object.erb', { method: method }) %>
<%    else -%>
<%=     render('jni/static_method.erb', { method: method }) %>
<%    end -%>
<%  end -%>
<%# Static methods -%>
<%  entity.static_methods.each do |method| -%>
<%    next if method.name.start_with?('Create') || method.name.start_with?('Init') -%>
<%    if should_return_data(method) -%>
<%=     render('jni/static_method_returning_data.erb', { method: method }) %>
<%    elsif should_return_string(method) -%>
<%=     render('jni/static_method_returning_string.erb', { method: method }) %>
<%    elsif should_return_object(method) -%>
<%=     render('jni/static_method_returning_object.erb', { method: method }) %>
<%    else -%>
<%=     render('jni/static_method.erb', { method: method }) %>
<%    end -%>
<%  end -%>
<%# Properties -%>
<% entity.properties.each do |method| -%>
<%   if should_return_data(method) -%>
<%=    render('jni/method_returning_data.erb', { method: method }) %>
<%   elsif should_return_string(method) -%>
<%=    render('jni/method_returning_string.erb', { method: method }) %>
<%   elsif should_return_object(method) -%>
<%=    render('jni/method_returning_object.erb', { method: method }) %>
<%   else -%>
<%=    render('jni/method.erb', { method: method }) %>
<%   end -%>
<% end -%>
<%# Methods -%>
<% entity.methods.each do |method| -%>
<%   next if method.name == "Delete" -%>
<%   if should_return_data(method) -%>
<%=    render('jni/method_returning_data.erb', { method: method }) %>
<%   elsif should_return_string(method) -%>
<%=    render('jni/method_returning_string.erb', { method: method }) %>
<%   elsif should_return_object(method) -%>
<%=    render('jni/method_returning_object.erb', { method: method }) %>
<%   else -%>
<%=    render('jni/method.erb', { method: method }) %>
<%   end -%>
<% end -%>
<%  less = entity.static_methods.detect{ |i| i.name == 'Less' } -%>
<%  equal = entity.static_methods.detect{ |i| i.name == 'Equal' } -%>
<%  if !less.nil? && !equal.nil? -%>
<%=   render('jni/compare_to.erb', { less: less, equal: equal }) %>
<%  end -%>
