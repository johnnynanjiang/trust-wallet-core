/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.TW.proto.BitcoinSigningInput');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Map');
goog.require('jspb.Message');
goog.require('proto.TW.proto.BitcoinUnspentTransaction');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TW.proto.BitcoinSigningInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TW.proto.BitcoinSigningInput.repeatedFields_, null);
};
goog.inherits(proto.TW.proto.BitcoinSigningInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TW.proto.BitcoinSigningInput.displayName = 'proto.TW.proto.BitcoinSigningInput';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TW.proto.BitcoinSigningInput.repeatedFields_ = [10,12];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TW.proto.BitcoinSigningInput.prototype.toObject = function(opt_includeInstance) {
  return proto.TW.proto.BitcoinSigningInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TW.proto.BitcoinSigningInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TW.proto.BitcoinSigningInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    hashType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    amount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    byteFee: jspb.Message.getFieldWithDefault(msg, 3, 0),
    toAddress: jspb.Message.getFieldWithDefault(msg, 4, ""),
    changeAddress: jspb.Message.getFieldWithDefault(msg, 5, ""),
    privateKeyList: msg.getPrivateKeyList_asB64(),
    scriptsMap: (f = msg.getScriptsMap()) ? f.toObject(includeInstance, undefined) : [],
    utxoList: jspb.Message.toObjectList(msg.getUtxoList(),
    proto.TW.proto.BitcoinUnspentTransaction.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TW.proto.BitcoinSigningInput}
 */
proto.TW.proto.BitcoinSigningInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TW.proto.BitcoinSigningInput;
  return proto.TW.proto.BitcoinSigningInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TW.proto.BitcoinSigningInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TW.proto.BitcoinSigningInput}
 */
proto.TW.proto.BitcoinSigningInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHashType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setByteFee(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setToAddress(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setChangeAddress(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addPrivateKey(value);
      break;
    case 11:
      var value = msg.getScriptsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBytes, null, "");
         });
      break;
    case 12:
      var value = new proto.TW.proto.BitcoinUnspentTransaction;
      reader.readMessage(value,proto.TW.proto.BitcoinUnspentTransaction.deserializeBinaryFromReader);
      msg.addUtxo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TW.proto.BitcoinSigningInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TW.proto.BitcoinSigningInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TW.proto.BitcoinSigningInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TW.proto.BitcoinSigningInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHashType();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getByteFee();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getToAddress();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getChangeAddress();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getPrivateKeyList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      10,
      f
    );
  }
  f = message.getScriptsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(11, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBytes);
  }
  f = message.getUtxoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.TW.proto.BitcoinUnspentTransaction.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 hash_type = 1;
 * @return {number}
 */
proto.TW.proto.BitcoinSigningInput.prototype.getHashType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.TW.proto.BitcoinSigningInput.prototype.setHashType = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 amount = 2;
 * @return {number}
 */
proto.TW.proto.BitcoinSigningInput.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.TW.proto.BitcoinSigningInput.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 byte_fee = 3;
 * @return {number}
 */
proto.TW.proto.BitcoinSigningInput.prototype.getByteFee = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.TW.proto.BitcoinSigningInput.prototype.setByteFee = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string to_address = 4;
 * @return {string}
 */
proto.TW.proto.BitcoinSigningInput.prototype.getToAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.TW.proto.BitcoinSigningInput.prototype.setToAddress = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string change_address = 5;
 * @return {string}
 */
proto.TW.proto.BitcoinSigningInput.prototype.getChangeAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.TW.proto.BitcoinSigningInput.prototype.setChangeAddress = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated bytes private_key = 10;
 * @return {!Array<string>}
 */
proto.TW.proto.BitcoinSigningInput.prototype.getPrivateKeyList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 10));
};


/**
 * repeated bytes private_key = 10;
 * This is a type-conversion wrapper around `getPrivateKeyList()`
 * @return {!Array<string>}
 */
proto.TW.proto.BitcoinSigningInput.prototype.getPrivateKeyList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getPrivateKeyList()));
};


/**
 * repeated bytes private_key = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPrivateKeyList()`
 * @return {!Array<!Uint8Array>}
 */
proto.TW.proto.BitcoinSigningInput.prototype.getPrivateKeyList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getPrivateKeyList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.TW.proto.BitcoinSigningInput.prototype.setPrivateKeyList = function(value) {
  jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.TW.proto.BitcoinSigningInput.prototype.addPrivateKey = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


proto.TW.proto.BitcoinSigningInput.prototype.clearPrivateKeyList = function() {
  this.setPrivateKeyList([]);
};


/**
 * map<string, bytes> scripts = 11;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!(string|Uint8Array)>}
 */
proto.TW.proto.BitcoinSigningInput.prototype.getScriptsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!(string|Uint8Array)>} */ (
      jspb.Message.getMapField(this, 11, opt_noLazyCreate,
      null));
};


proto.TW.proto.BitcoinSigningInput.prototype.clearScriptsMap = function() {
  this.getScriptsMap().clear();
};


/**
 * repeated BitcoinUnspentTransaction utxo = 12;
 * @return {!Array<!proto.TW.proto.BitcoinUnspentTransaction>}
 */
proto.TW.proto.BitcoinSigningInput.prototype.getUtxoList = function() {
  return /** @type{!Array<!proto.TW.proto.BitcoinUnspentTransaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TW.proto.BitcoinUnspentTransaction, 12));
};


/** @param {!Array<!proto.TW.proto.BitcoinUnspentTransaction>} value */
proto.TW.proto.BitcoinSigningInput.prototype.setUtxoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.TW.proto.BitcoinUnspentTransaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TW.proto.BitcoinUnspentTransaction}
 */
proto.TW.proto.BitcoinSigningInput.prototype.addUtxo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.TW.proto.BitcoinUnspentTransaction, opt_index);
};


proto.TW.proto.BitcoinSigningInput.prototype.clearUtxoList = function() {
  this.setUtxoList([]);
};


