// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: TrustWalletCore.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct TW_Proto_BitcoinOutPoint {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var hash: Data = SwiftProtobuf.Internal.emptyData

  public var index: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_Proto_BitcoinUnspentTransaction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var outPoint: TW_Proto_BitcoinOutPoint {
    get {return _storage._outPoint ?? TW_Proto_BitcoinOutPoint()}
    set {_uniqueStorage()._outPoint = newValue}
  }
  /// Returns true if `outPoint` has been explicitly set.
  public var hasOutPoint: Bool {return _storage._outPoint != nil}
  /// Clears the value of `outPoint`. Subsequent reads from it will return its default value.
  public mutating func clearOutPoint() {_uniqueStorage()._outPoint = nil}

  public var script: Data {
    get {return _storage._script}
    set {_uniqueStorage()._script = newValue}
  }

  public var amount: Int64 {
    get {return _storage._amount}
    set {_uniqueStorage()._amount = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Input data necessary to create a signed transaction.
public struct TW_Proto_BitcoinSigningInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var hashType: UInt32 = 0

  public var amount: Int64 = 0

  public var byteFee: Int64 = 0

  public var toAddress: String = String()

  public var changeAddress: String = String()

  public var sequence: UInt32 = 0

  public var privateKey: [Data] = []

  public var scripts: Dictionary<String,Data> = [:]

  public var utxo: [TW_Proto_BitcoinUnspentTransaction] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_Proto_BinanceTransaction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// uint64 SIZE-OF-ENCODED      // varint encoded length of the structure after encoding
  /// 0xF0625DEE                  // prefix
  public var msgs: [Data] = []

  /// array of size 1, containing the standard signature structure of the transaction sender
  public var signatures: [Data] = []

  /// a short sentence of remark for the transaction, only for `Transfer` transactions.
  public var memo: String = String()

  /// an identifier for tools triggerring this transaction, set to zero if unwilling to disclose.
  public var source: Int64 = 0

  /// reserved for future use
  public var data: Data = SwiftProtobuf.Internal.emptyData

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_Proto_BinanceSignature {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// public key bytes of the signer address
  public var pubKey: Data = SwiftProtobuf.Internal.emptyData

  /// signature bytes, please check chain access section for signature generation
  public var signature: Data = SwiftProtobuf.Internal.emptyData

  /// another identifier of signer, which can be read from chain by account REST API or RPC
  public var accountNumber: Int64 = 0

  /// sequence number for the next transaction
  public var sequence: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// 0xEB5AE987          // prefix
  /// bytes               // public key bytes
  public struct PubKey {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

public struct TW_Proto_BinanceTradeOrder {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 0xCE6DC043           // prefix
  public var sender: Data = SwiftProtobuf.Internal.emptyData

  /// order id, optional
  public var id: String = String()

  /// symbol for trading pair in full name of the tokens
  public var symbol: String = String()

  /// only accept 2 for now, meaning limit order
  public var ordertype: Int64 = 0

  /// 1 for buy and 2 fory sell
  public var side: Int64 = 0

  /// price of the order, which is the real price multiplied by 1e8 (10^8) and rounded to integer
  public var price: Int64 = 0

  /// quantity of the order, which is the real price multiplied by 1e8 (10^8) and rounded to integer
  public var quantity: Int64 = 0

  /// 1 for Good Till Expire(GTE) order and 3 for Immediate Or Cancel (IOC)
  public var timeinforce: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_Proto_BinanceCancelTradeOrder {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 0x166E681B      // prefix
  public var sender: Data = SwiftProtobuf.Internal.emptyData

  /// symbol for trading pair in full name of the tokens
  public var symbol: String = String()

  /// order id to cancel
  public var refid: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_Proto_BinanceSendOrder {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var inputs: [TW_Proto_BinanceSendOrder.Input] = []

  public var outputs: [TW_Proto_BinanceSendOrder.Output] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// 0x2A2C87FA
  public struct Token {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var denom: String = String()

    public var amount: Int64 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct Input {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var address: Data = SwiftProtobuf.Internal.emptyData

    public var coins: [TW_Proto_BinanceSendOrder.Token] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct Output {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var address: Data = SwiftProtobuf.Internal.emptyData

    public var coins: [TW_Proto_BinanceSendOrder.Token] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

public struct TW_Proto_BinanceTokenFreezeOrder {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 0xE774B32D      // prefix
  public var from: Data = SwiftProtobuf.Internal.emptyData

  /// token symbol, in full name with "-" suffix
  public var symbol: String = String()

  /// amount of token to freeze
  public var amount: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_Proto_BinanceTokenUnfreezeOrder {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 0x6515FF0D      // prefix
  public var from: Data = SwiftProtobuf.Internal.emptyData

  /// token symbol, in full name with "-" suffix
  public var symbol: String = String()

  /// amount of token to unfreeze
  public var amount: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Input data necessary to create a signed order.
public struct TW_Proto_BinanceSigningInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var chainID: String {
    get {return _storage._chainID}
    set {_uniqueStorage()._chainID = newValue}
  }

  public var accountNumber: Int64 {
    get {return _storage._accountNumber}
    set {_uniqueStorage()._accountNumber = newValue}
  }

  public var sequence: Int64 {
    get {return _storage._sequence}
    set {_uniqueStorage()._sequence = newValue}
  }

  public var source: Int64 {
    get {return _storage._source}
    set {_uniqueStorage()._source = newValue}
  }

  public var memo: String {
    get {return _storage._memo}
    set {_uniqueStorage()._memo = newValue}
  }

  public var privateKey: Data {
    get {return _storage._privateKey}
    set {_uniqueStorage()._privateKey = newValue}
  }

  public var orderOneof: OneOf_OrderOneof? {
    get {return _storage._orderOneof}
    set {_uniqueStorage()._orderOneof = newValue}
  }

  public var tradeOrder: TW_Proto_BinanceTradeOrder {
    get {
      if case .tradeOrder(let v)? = _storage._orderOneof {return v}
      return TW_Proto_BinanceTradeOrder()
    }
    set {_uniqueStorage()._orderOneof = .tradeOrder(newValue)}
  }

  public var cancelTradeOrder: TW_Proto_BinanceCancelTradeOrder {
    get {
      if case .cancelTradeOrder(let v)? = _storage._orderOneof {return v}
      return TW_Proto_BinanceCancelTradeOrder()
    }
    set {_uniqueStorage()._orderOneof = .cancelTradeOrder(newValue)}
  }

  public var sendOrder: TW_Proto_BinanceSendOrder {
    get {
      if case .sendOrder(let v)? = _storage._orderOneof {return v}
      return TW_Proto_BinanceSendOrder()
    }
    set {_uniqueStorage()._orderOneof = .sendOrder(newValue)}
  }

  public var freezeOrder: TW_Proto_BinanceTokenFreezeOrder {
    get {
      if case .freezeOrder(let v)? = _storage._orderOneof {return v}
      return TW_Proto_BinanceTokenFreezeOrder()
    }
    set {_uniqueStorage()._orderOneof = .freezeOrder(newValue)}
  }

  public var unfreezeOrder: TW_Proto_BinanceTokenUnfreezeOrder {
    get {
      if case .unfreezeOrder(let v)? = _storage._orderOneof {return v}
      return TW_Proto_BinanceTokenUnfreezeOrder()
    }
    set {_uniqueStorage()._orderOneof = .unfreezeOrder(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_OrderOneof: Equatable {
    case tradeOrder(TW_Proto_BinanceTradeOrder)
    case cancelTradeOrder(TW_Proto_BinanceCancelTradeOrder)
    case sendOrder(TW_Proto_BinanceSendOrder)
    case freezeOrder(TW_Proto_BinanceTokenFreezeOrder)
    case unfreezeOrder(TW_Proto_BinanceTokenUnfreezeOrder)

  #if !swift(>=4.1)
    public static func ==(lhs: TW_Proto_BinanceSigningInput.OneOf_OrderOneof, rhs: TW_Proto_BinanceSigningInput.OneOf_OrderOneof) -> Bool {
      switch (lhs, rhs) {
      case (.tradeOrder(let l), .tradeOrder(let r)): return l == r
      case (.cancelTradeOrder(let l), .cancelTradeOrder(let r)): return l == r
      case (.sendOrder(let l), .sendOrder(let r)): return l == r
      case (.freezeOrder(let l), .freezeOrder(let r)): return l == r
      case (.unfreezeOrder(let l), .unfreezeOrder(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "TW.proto"

extension TW_Proto_BitcoinOutPoint: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BitcoinOutPoint"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hash"),
    2: .same(proto: "index"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.hash)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.index)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.hash.isEmpty {
      try visitor.visitSingularBytesField(value: self.hash, fieldNumber: 1)
    }
    if self.index != 0 {
      try visitor.visitSingularUInt32Field(value: self.index, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Proto_BitcoinOutPoint, rhs: TW_Proto_BitcoinOutPoint) -> Bool {
    if lhs.hash != rhs.hash {return false}
    if lhs.index != rhs.index {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Proto_BitcoinUnspentTransaction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BitcoinUnspentTransaction"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "out_point"),
    2: .same(proto: "script"),
    3: .same(proto: "amount"),
  ]

  fileprivate class _StorageClass {
    var _outPoint: TW_Proto_BitcoinOutPoint? = nil
    var _script: Data = SwiftProtobuf.Internal.emptyData
    var _amount: Int64 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _outPoint = source._outPoint
      _script = source._script
      _amount = source._amount
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._outPoint)
        case 2: try decoder.decodeSingularBytesField(value: &_storage._script)
        case 3: try decoder.decodeSingularInt64Field(value: &_storage._amount)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._outPoint {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._script.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._script, fieldNumber: 2)
      }
      if _storage._amount != 0 {
        try visitor.visitSingularInt64Field(value: _storage._amount, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Proto_BitcoinUnspentTransaction, rhs: TW_Proto_BitcoinUnspentTransaction) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._outPoint != rhs_storage._outPoint {return false}
        if _storage._script != rhs_storage._script {return false}
        if _storage._amount != rhs_storage._amount {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Proto_BitcoinSigningInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BitcoinSigningInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "hash_type"),
    2: .same(proto: "amount"),
    3: .standard(proto: "byte_fee"),
    4: .standard(proto: "to_address"),
    5: .standard(proto: "change_address"),
    6: .same(proto: "sequence"),
    10: .standard(proto: "private_key"),
    11: .same(proto: "scripts"),
    12: .same(proto: "utxo"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.hashType)
      case 2: try decoder.decodeSingularInt64Field(value: &self.amount)
      case 3: try decoder.decodeSingularInt64Field(value: &self.byteFee)
      case 4: try decoder.decodeSingularStringField(value: &self.toAddress)
      case 5: try decoder.decodeSingularStringField(value: &self.changeAddress)
      case 6: try decoder.decodeSingularUInt32Field(value: &self.sequence)
      case 10: try decoder.decodeRepeatedBytesField(value: &self.privateKey)
      case 11: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufBytes>.self, value: &self.scripts)
      case 12: try decoder.decodeRepeatedMessageField(value: &self.utxo)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.hashType != 0 {
      try visitor.visitSingularUInt32Field(value: self.hashType, fieldNumber: 1)
    }
    if self.amount != 0 {
      try visitor.visitSingularInt64Field(value: self.amount, fieldNumber: 2)
    }
    if self.byteFee != 0 {
      try visitor.visitSingularInt64Field(value: self.byteFee, fieldNumber: 3)
    }
    if !self.toAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.toAddress, fieldNumber: 4)
    }
    if !self.changeAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.changeAddress, fieldNumber: 5)
    }
    if self.sequence != 0 {
      try visitor.visitSingularUInt32Field(value: self.sequence, fieldNumber: 6)
    }
    if !self.privateKey.isEmpty {
      try visitor.visitRepeatedBytesField(value: self.privateKey, fieldNumber: 10)
    }
    if !self.scripts.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufBytes>.self, value: self.scripts, fieldNumber: 11)
    }
    if !self.utxo.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.utxo, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Proto_BitcoinSigningInput, rhs: TW_Proto_BitcoinSigningInput) -> Bool {
    if lhs.hashType != rhs.hashType {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.byteFee != rhs.byteFee {return false}
    if lhs.toAddress != rhs.toAddress {return false}
    if lhs.changeAddress != rhs.changeAddress {return false}
    if lhs.sequence != rhs.sequence {return false}
    if lhs.privateKey != rhs.privateKey {return false}
    if lhs.scripts != rhs.scripts {return false}
    if lhs.utxo != rhs.utxo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Proto_BinanceTransaction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BinanceTransaction"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "msgs"),
    2: .same(proto: "signatures"),
    3: .same(proto: "memo"),
    4: .same(proto: "source"),
    5: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedBytesField(value: &self.msgs)
      case 2: try decoder.decodeRepeatedBytesField(value: &self.signatures)
      case 3: try decoder.decodeSingularStringField(value: &self.memo)
      case 4: try decoder.decodeSingularSInt64Field(value: &self.source)
      case 5: try decoder.decodeSingularBytesField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.msgs.isEmpty {
      try visitor.visitRepeatedBytesField(value: self.msgs, fieldNumber: 1)
    }
    if !self.signatures.isEmpty {
      try visitor.visitRepeatedBytesField(value: self.signatures, fieldNumber: 2)
    }
    if !self.memo.isEmpty {
      try visitor.visitSingularStringField(value: self.memo, fieldNumber: 3)
    }
    if self.source != 0 {
      try visitor.visitSingularSInt64Field(value: self.source, fieldNumber: 4)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Proto_BinanceTransaction, rhs: TW_Proto_BinanceTransaction) -> Bool {
    if lhs.msgs != rhs.msgs {return false}
    if lhs.signatures != rhs.signatures {return false}
    if lhs.memo != rhs.memo {return false}
    if lhs.source != rhs.source {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Proto_BinanceSignature: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BinanceSignature"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pub_key"),
    2: .same(proto: "signature"),
    3: .standard(proto: "account_number"),
    4: .same(proto: "sequence"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.pubKey)
      case 2: try decoder.decodeSingularBytesField(value: &self.signature)
      case 3: try decoder.decodeSingularSInt64Field(value: &self.accountNumber)
      case 4: try decoder.decodeSingularSInt64Field(value: &self.sequence)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.pubKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.pubKey, fieldNumber: 1)
    }
    if !self.signature.isEmpty {
      try visitor.visitSingularBytesField(value: self.signature, fieldNumber: 2)
    }
    if self.accountNumber != 0 {
      try visitor.visitSingularSInt64Field(value: self.accountNumber, fieldNumber: 3)
    }
    if self.sequence != 0 {
      try visitor.visitSingularSInt64Field(value: self.sequence, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Proto_BinanceSignature, rhs: TW_Proto_BinanceSignature) -> Bool {
    if lhs.pubKey != rhs.pubKey {return false}
    if lhs.signature != rhs.signature {return false}
    if lhs.accountNumber != rhs.accountNumber {return false}
    if lhs.sequence != rhs.sequence {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Proto_BinanceSignature.PubKey: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Proto_BinanceSignature.protoMessageName + ".PubKey"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Proto_BinanceSignature.PubKey, rhs: TW_Proto_BinanceSignature.PubKey) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Proto_BinanceTradeOrder: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BinanceTradeOrder"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sender"),
    2: .same(proto: "id"),
    3: .same(proto: "symbol"),
    4: .same(proto: "ordertype"),
    5: .same(proto: "side"),
    6: .same(proto: "price"),
    7: .same(proto: "quantity"),
    8: .same(proto: "timeinforce"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.sender)
      case 2: try decoder.decodeSingularStringField(value: &self.id)
      case 3: try decoder.decodeSingularStringField(value: &self.symbol)
      case 4: try decoder.decodeSingularSInt64Field(value: &self.ordertype)
      case 5: try decoder.decodeSingularSInt64Field(value: &self.side)
      case 6: try decoder.decodeSingularSInt64Field(value: &self.price)
      case 7: try decoder.decodeSingularSInt64Field(value: &self.quantity)
      case 8: try decoder.decodeSingularSInt64Field(value: &self.timeinforce)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sender.isEmpty {
      try visitor.visitSingularBytesField(value: self.sender, fieldNumber: 1)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 2)
    }
    if !self.symbol.isEmpty {
      try visitor.visitSingularStringField(value: self.symbol, fieldNumber: 3)
    }
    if self.ordertype != 0 {
      try visitor.visitSingularSInt64Field(value: self.ordertype, fieldNumber: 4)
    }
    if self.side != 0 {
      try visitor.visitSingularSInt64Field(value: self.side, fieldNumber: 5)
    }
    if self.price != 0 {
      try visitor.visitSingularSInt64Field(value: self.price, fieldNumber: 6)
    }
    if self.quantity != 0 {
      try visitor.visitSingularSInt64Field(value: self.quantity, fieldNumber: 7)
    }
    if self.timeinforce != 0 {
      try visitor.visitSingularSInt64Field(value: self.timeinforce, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Proto_BinanceTradeOrder, rhs: TW_Proto_BinanceTradeOrder) -> Bool {
    if lhs.sender != rhs.sender {return false}
    if lhs.id != rhs.id {return false}
    if lhs.symbol != rhs.symbol {return false}
    if lhs.ordertype != rhs.ordertype {return false}
    if lhs.side != rhs.side {return false}
    if lhs.price != rhs.price {return false}
    if lhs.quantity != rhs.quantity {return false}
    if lhs.timeinforce != rhs.timeinforce {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Proto_BinanceCancelTradeOrder: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BinanceCancelTradeOrder"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sender"),
    2: .same(proto: "symbol"),
    4: .same(proto: "refid"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.sender)
      case 2: try decoder.decodeSingularStringField(value: &self.symbol)
      case 4: try decoder.decodeSingularStringField(value: &self.refid)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sender.isEmpty {
      try visitor.visitSingularBytesField(value: self.sender, fieldNumber: 1)
    }
    if !self.symbol.isEmpty {
      try visitor.visitSingularStringField(value: self.symbol, fieldNumber: 2)
    }
    if !self.refid.isEmpty {
      try visitor.visitSingularStringField(value: self.refid, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Proto_BinanceCancelTradeOrder, rhs: TW_Proto_BinanceCancelTradeOrder) -> Bool {
    if lhs.sender != rhs.sender {return false}
    if lhs.symbol != rhs.symbol {return false}
    if lhs.refid != rhs.refid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Proto_BinanceSendOrder: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BinanceSendOrder"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "inputs"),
    2: .same(proto: "outputs"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.inputs)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.outputs)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.inputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.inputs, fieldNumber: 1)
    }
    if !self.outputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.outputs, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Proto_BinanceSendOrder, rhs: TW_Proto_BinanceSendOrder) -> Bool {
    if lhs.inputs != rhs.inputs {return false}
    if lhs.outputs != rhs.outputs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Proto_BinanceSendOrder.Token: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Proto_BinanceSendOrder.protoMessageName + ".Token"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "denom"),
    2: .same(proto: "amount"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.denom)
      case 2: try decoder.decodeSingularSInt64Field(value: &self.amount)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.denom.isEmpty {
      try visitor.visitSingularStringField(value: self.denom, fieldNumber: 1)
    }
    if self.amount != 0 {
      try visitor.visitSingularSInt64Field(value: self.amount, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Proto_BinanceSendOrder.Token, rhs: TW_Proto_BinanceSendOrder.Token) -> Bool {
    if lhs.denom != rhs.denom {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Proto_BinanceSendOrder.Input: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Proto_BinanceSendOrder.protoMessageName + ".Input"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .same(proto: "coins"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.address)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.coins)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularBytesField(value: self.address, fieldNumber: 1)
    }
    if !self.coins.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.coins, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Proto_BinanceSendOrder.Input, rhs: TW_Proto_BinanceSendOrder.Input) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.coins != rhs.coins {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Proto_BinanceSendOrder.Output: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Proto_BinanceSendOrder.protoMessageName + ".Output"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .same(proto: "coins"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.address)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.coins)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularBytesField(value: self.address, fieldNumber: 1)
    }
    if !self.coins.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.coins, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Proto_BinanceSendOrder.Output, rhs: TW_Proto_BinanceSendOrder.Output) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.coins != rhs.coins {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Proto_BinanceTokenFreezeOrder: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BinanceTokenFreezeOrder"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "from"),
    2: .same(proto: "symbol"),
    3: .same(proto: "amount"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.from)
      case 2: try decoder.decodeSingularStringField(value: &self.symbol)
      case 3: try decoder.decodeSingularSInt64Field(value: &self.amount)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.from.isEmpty {
      try visitor.visitSingularBytesField(value: self.from, fieldNumber: 1)
    }
    if !self.symbol.isEmpty {
      try visitor.visitSingularStringField(value: self.symbol, fieldNumber: 2)
    }
    if self.amount != 0 {
      try visitor.visitSingularSInt64Field(value: self.amount, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Proto_BinanceTokenFreezeOrder, rhs: TW_Proto_BinanceTokenFreezeOrder) -> Bool {
    if lhs.from != rhs.from {return false}
    if lhs.symbol != rhs.symbol {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Proto_BinanceTokenUnfreezeOrder: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BinanceTokenUnfreezeOrder"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "from"),
    2: .same(proto: "symbol"),
    3: .same(proto: "amount"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.from)
      case 2: try decoder.decodeSingularStringField(value: &self.symbol)
      case 3: try decoder.decodeSingularSInt64Field(value: &self.amount)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.from.isEmpty {
      try visitor.visitSingularBytesField(value: self.from, fieldNumber: 1)
    }
    if !self.symbol.isEmpty {
      try visitor.visitSingularStringField(value: self.symbol, fieldNumber: 2)
    }
    if self.amount != 0 {
      try visitor.visitSingularSInt64Field(value: self.amount, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Proto_BinanceTokenUnfreezeOrder, rhs: TW_Proto_BinanceTokenUnfreezeOrder) -> Bool {
    if lhs.from != rhs.from {return false}
    if lhs.symbol != rhs.symbol {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Proto_BinanceSigningInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BinanceSigningInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chain_id"),
    2: .standard(proto: "account_number"),
    3: .same(proto: "sequence"),
    4: .same(proto: "source"),
    5: .same(proto: "memo"),
    6: .standard(proto: "private_key"),
    7: .standard(proto: "trade_order"),
    8: .standard(proto: "cancel_trade_order"),
    9: .standard(proto: "send_order"),
    10: .standard(proto: "freeze_order"),
    11: .standard(proto: "unfreeze_order"),
  ]

  fileprivate class _StorageClass {
    var _chainID: String = String()
    var _accountNumber: Int64 = 0
    var _sequence: Int64 = 0
    var _source: Int64 = 0
    var _memo: String = String()
    var _privateKey: Data = SwiftProtobuf.Internal.emptyData
    var _orderOneof: TW_Proto_BinanceSigningInput.OneOf_OrderOneof?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _chainID = source._chainID
      _accountNumber = source._accountNumber
      _sequence = source._sequence
      _source = source._source
      _memo = source._memo
      _privateKey = source._privateKey
      _orderOneof = source._orderOneof
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._chainID)
        case 2: try decoder.decodeSingularSInt64Field(value: &_storage._accountNumber)
        case 3: try decoder.decodeSingularSInt64Field(value: &_storage._sequence)
        case 4: try decoder.decodeSingularSInt64Field(value: &_storage._source)
        case 5: try decoder.decodeSingularStringField(value: &_storage._memo)
        case 6: try decoder.decodeSingularBytesField(value: &_storage._privateKey)
        case 7:
          var v: TW_Proto_BinanceTradeOrder?
          if let current = _storage._orderOneof {
            try decoder.handleConflictingOneOf()
            if case .tradeOrder(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._orderOneof = .tradeOrder(v)}
        case 8:
          var v: TW_Proto_BinanceCancelTradeOrder?
          if let current = _storage._orderOneof {
            try decoder.handleConflictingOneOf()
            if case .cancelTradeOrder(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._orderOneof = .cancelTradeOrder(v)}
        case 9:
          var v: TW_Proto_BinanceSendOrder?
          if let current = _storage._orderOneof {
            try decoder.handleConflictingOneOf()
            if case .sendOrder(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._orderOneof = .sendOrder(v)}
        case 10:
          var v: TW_Proto_BinanceTokenFreezeOrder?
          if let current = _storage._orderOneof {
            try decoder.handleConflictingOneOf()
            if case .freezeOrder(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._orderOneof = .freezeOrder(v)}
        case 11:
          var v: TW_Proto_BinanceTokenUnfreezeOrder?
          if let current = _storage._orderOneof {
            try decoder.handleConflictingOneOf()
            if case .unfreezeOrder(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._orderOneof = .unfreezeOrder(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._chainID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._chainID, fieldNumber: 1)
      }
      if _storage._accountNumber != 0 {
        try visitor.visitSingularSInt64Field(value: _storage._accountNumber, fieldNumber: 2)
      }
      if _storage._sequence != 0 {
        try visitor.visitSingularSInt64Field(value: _storage._sequence, fieldNumber: 3)
      }
      if _storage._source != 0 {
        try visitor.visitSingularSInt64Field(value: _storage._source, fieldNumber: 4)
      }
      if !_storage._memo.isEmpty {
        try visitor.visitSingularStringField(value: _storage._memo, fieldNumber: 5)
      }
      if !_storage._privateKey.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._privateKey, fieldNumber: 6)
      }
      switch _storage._orderOneof {
      case .tradeOrder(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      case .cancelTradeOrder(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      case .sendOrder(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      case .freezeOrder(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      case .unfreezeOrder(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Proto_BinanceSigningInput, rhs: TW_Proto_BinanceSigningInput) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._chainID != rhs_storage._chainID {return false}
        if _storage._accountNumber != rhs_storage._accountNumber {return false}
        if _storage._sequence != rhs_storage._sequence {return false}
        if _storage._source != rhs_storage._source {return false}
        if _storage._memo != rhs_storage._memo {return false}
        if _storage._privateKey != rhs_storage._privateKey {return false}
        if _storage._orderOneof != rhs_storage._orderOneof {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
