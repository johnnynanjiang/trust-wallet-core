// Copyright Â© 2017-2018 Trust.
//
// This file is part of Trust. The full Trust copyright notice, including
// terms governing use, modification, and redistribution, is contained in the
// file LICENSE at the root of the source code distribution tree.

package com.wallet.crypto.trustapp.jni;

import java.security.InvalidParameterException;
import java.util.HashSet;

public class <%= entity.name %> {
    long nativeHandle;

<%# Constructor declarations -%>
<%- entity.static_methods.each do |method| -%>
    <%- next unless method.name.start_with?('Create') -%>
    static native <%= Java.type(method.return_type) %> native<%= method.name %>(<%= Java.parameters(method.parameters) %>);
<%- end -%>
<%- entity.methods.each do |method| -%>
    <%- next unless method.name.start_with?('Delete') -%>
    native <%= Java.type(method.return_type) %> <%= Java.format_name(method.name) %>(<%= Java.parameters(method.parameters.drop(1)) %>);
<%- end -%>

<%# Static property declarations -%>
<%- entity.static_properties.each do |property| -%>
    public static native <%= Java.type(property.return_type) %> <%= Java.format_name(property.name) %>(<%= Java.parameters(property.parameters) %>);
<%- end -%>
<%# Static method declarations -%>
<%- entity.static_methods.each do |method| -%>
    <%- next if method.name.start_with?('Create') -%>
    public static native <%= Java.type(method.return_type) %> <%= Java.format_name(method.name) %>(<%= Java.parameters(method.parameters) %>);
<%- end -%>
<%# Property declarations -%>
<%- entity.properties.each do |property| -%>
    public native <%= Java.type(property.return_type) %> <%= Java.format_name(property.name) %>(<%= Java.parameters(property.parameters.drop(1)) %>);
<%- end -%>
<%# Method declarations -%>
<%- entity.methods.each do |method| -%>
    <%- next if method.name.start_with?('Delete') -%>
    public native <%= Java.type(method.return_type) %> <%= Java.format_name(method.name) %>(<%= Java.parameters(method.parameters.drop(1)) %>);
<%- end -%>

<%# Constructors -%>
    <%= entity.name %>(long nativeHandle) {
        this.nativeHandle = nativeHandle;
    }

<%- entity.static_methods.each do |method| -%>
    <%- next unless method.name.start_with?('Create') -%>
    public <%= entity.name %>(<%= Java.parameters(method.parameters) %>) {
        nativeHandle = native<%= method.name %>(<%= Java.arguments(method.parameters) %>);
        if (nativeHandle == 0) {
            throw new InvalidParameterException();
        }

        <%= entity.name %>PhantomReference.register(this, nativeHandle);
    }

<%- end -%>
}

class <%= entity.name %>PhantomReference extends java.lang.ref.PhantomReference<<%= entity.name %>> {
    private static java.util.Set<<%= entity.name %>PhantomReference> references = new HashSet<<%= entity.name %>PhantomReference>();
    private static java.lang.ref.ReferenceQueue<<%= entity.name %>> queue = new java.lang.ref.ReferenceQueue<<%= entity.name %>>();
    private long nativeHandle;

    private <%= entity.name %>PhantomReference(<%= entity.name %> referent, long nativeHandle) {
        super(referent, queue);
        this.nativeHandle = nativeHandle;
    }

    static void register(<%= entity.name %> referent, long nativeHandle) {
        references.add(new <%= entity.name %>PhantomReference(referent, nativeHandle));
    }

    public static void doDeletes() {
        <%= entity.name %>PhantomReference ref = (<%= entity.name %>PhantomReference) queue.poll();
        for (; ref != null; ref = (<%= entity.name %>PhantomReference) queue.poll()) {
            <%= entity.name %>.delete(ref.nativeHandle);
            references.remove(ref);
        }
    }
}
