<%
  method = locals[:method]
  arguments = locals[:arguments] || ['rawValue'] + SwiftHelper.arguments(method.parameters.drop(1))
  call = render('swift/method_call.erb', { method: method, arguments: arguments })

  if should_return_data(method)
    if method.return_type.is_nullable -%>
        guard let result = <%= call %> else {
            return nil
        }
        return TWDataNSData(result)
<%  else -%>
        return TWDataNSData(<%= call %>)
<%  end
  elsif should_return_string(method)
    if method.return_type.is_nullable -%>
        guard let result = <%= call %> else {
            return nil
        }
        return TWStringNSString(result)
<%  else -%>
        return TWStringNSString(TW<%= @entity.name %><%= method.name %>(<%= arguments.join(', ') %>))
<%  end
  elsif method.return_type.is_enum -%>
        return <%= method.return_type.name %>(rawValue: TW<%= @entity.name %><%= method.name %>(<%= arguments.join(', ') %>).rawValue)!
<%elsif method.return_type.is_class || method.return_type.is_struct
    if method.return_type.is_nullable -%>
        guard let value = <%= call %> else {
            return nil
        }
        return <%= method.return_type.name %>(rawValue: value)
<%  else -%>
        return <%= method.return_type.name %>(rawValue: <%= call %>)
<%  end
  else -%>
        return <%= call %>
<%end -%>