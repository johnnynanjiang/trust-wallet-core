    var rawValue: TW<%= entity.name %>

<%# Properties -%>
<%- entity.properties.each do |property| -%>
<%-   if should_return_data(property) -%>
<%=     render('swift/data_property.erb', { property: property }) %>
<%-     next -%>
<%-   elsif should_return_string(property) -%>
<%=     render('swift/string_property.erb', { property: property }) %>
<%-     next -%>
<%-   end -%>
    public var <%= SwiftHelper.format_name(property.name) %>: <%= SwiftHelper.type(property.return_type) %> {
        <%- if property.return_type.is_class || property.return_type.is_struct -%>
        return <%= SwiftHelper.type(property.return_type) %>(rawValue: TW<%= entity.name %><%= property.name %>(rawValue))
        <%- else -%>
        return TW<%= entity.name %><%= property.name %>(rawValue)
        <%- end -%>
    }

<%- end -%>
    init(rawValue: TW<%= entity.name %>) {
        self.rawValue = rawValue
    }

<%# Initializers -%>
<%  entity.static_methods.each do |method| -%>
<%    next unless method.name.start_with?('Init') -%>
<%    if method.return_type.name == :bool -%>
    public init?(<%= SwiftHelper.parameters(method.parameters.drop(1)) %>) {
<%    else -%>
    public init(<%= SwiftHelper.parameters(method.parameters.drop(1)) %>) {
<%    end -%>
<%=   render('swift/parameter_access.erb', { parameters: method.parameters.drop(1) }) -%>
        rawValue = TW<%= entity.name %>()
<%    arguments = ['&rawValue'] + SwiftHelper.arguments(method.parameters.drop(1)) -%>
<%    if method.return_type.name == :bool -%>
        guard TW<%= entity.name %><%= method.name %>(<%= arguments.join(', ') %>) else {
            return nil
        }
<%    else -%>
        TW<%= entity.name %><%= method.name %>(<%= arguments.join(', ') %>)
<%    end -%>
    }

<%  end -%>