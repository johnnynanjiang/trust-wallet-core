<%# Properties -%>
<%- entity.properties.each do |property| -%>
    <%- if should_return_data(property) -%>
<%= render('swift/data_property.erb', { property: property }) %>
    <%- next end -%>
    public var <%= SwiftHelper.format_name(property.name) %>: <%= SwiftHelper.type(property.return_type) %> {
        <%- if property.return_type.is_class || property.return_type.is_struct -%>
        return <%= SwiftHelper.type(property.return_type) %>(rawValue: TW<%= entity.name %><%= property.name %>(rawValue))
        <%- else -%>
        return TW<%= entity.name %><%= property.name %>(rawValue)
        <%- end -%>
    }

<%- end -%>
    private let rawValue: OpaquePointer

    init(rawValue: OpaquePointer) {
        self.rawValue = rawValue
    }

<%# Initializers -%>
<% entity.static_methods.each do |method| -%>
    <%- next unless method.name.start_with?('Create') -%>
<%   if method.return_type.is_nullable -%>
    public init?(<%= SwiftHelper.parameters(method.parameters) %>) {
        guard let rawValue = TW<%= entity.name %><%= method.name %>(<%= SwiftHelper.arguments(method.parameters) %>) else {
            return nil
        }
        self.rawValue = rawValue
    }
<%   else -%>
    public init(<%= SwiftHelper.parameters(method.parameters) %>) {
        rawValue = TW<%= entity.name %><%= method.name %>(<%= SwiftHelper.arguments(method.parameters) %>)
    }
<%   end -%>

<% end -%>
    deinit {
        TW<%= entity.name %>Delete(rawValue)
    }
