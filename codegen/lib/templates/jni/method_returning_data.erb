<% method = locals[:method] -%>
<%=  render('jni/method_returning_data_prototype.erb', { method: method }) %> {
    currentEnv = env;
    jclass thisClass = (*env)->GetObjectClass(env, thisObject);
<%   if entity.is_struct -%>
    jfieldID bytesFieldID = (*env)->GetFieldID(env, thisClass, "bytes", "[b");
    jbyteArray bytesArray = (*env)->GetObjectField(env, thisObject, bytesFieldID);
    jbyte* bytesBuffer = (*env)->GetByteArrayElements(env, bytesArray, NULL);
    struct TW<%= entity.name %> *instance = (struct TW<%= entity.name %> *) bytesBuffer;
<%   else -%>
    jfieldID handleFieldID = (*env)->GetFieldID(env, thisClass, "nativeHandle", "J");
    struct TW<%= entity.name %> *instance = (struct TW<%= entity.name %> *) (*env)->GetLongField(env, thisObject, handleFieldID);
<%   end -%>

<%   if method.return_type.name != :void -%>
    <%= JNIHelper.type(method.return_type) %> resultValue = (<%= JNIHelper.type(method.return_type) %>) <%= render('jni/method_call.erb', { method: method }) %>;
<%   else -%>
    <%= render('jni/method_call.erb', { method: method }) %>;
<%   end -%>

<%   if entity.is_struct -%>
    (*env)->ReleaseByteArrayElements(env, bytesArray, bytesBuffer, JNI_ABORT);

<%   end -%>
<%   if method.return_type.name != :void -%>
    return resultValue;
<%   end -%>
}
